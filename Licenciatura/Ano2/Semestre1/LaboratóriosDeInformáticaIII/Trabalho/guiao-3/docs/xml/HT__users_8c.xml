<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.17">
  <compounddef id="HT__users_8c" kind="file" language="C++">
    <compoundname>HT_users.c</compoundname>
    <includes refid="HT__users_8h" local="yes">HT_users.h</includes>
    <includes refid="auxiliarFunc_8h" local="yes">auxiliarFunc.h</includes>
    <includes refid="auxiliarStruct_8h" local="yes">auxiliarStruct.h</includes>
    <includes refid="auxiliarTree_8h" local="yes">auxiliarTree.h</includes>
    <incdepgraph>
      <node id="9">
        <label>auxiliarStruct.h</label>
        <link refid="auxiliarStruct_8h"/>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="4" relation="include">
        </childnode>
        <childnode refid="5" relation="include">
        </childnode>
      </node>
      <node id="4">
        <label>stdlib.h</label>
      </node>
      <node id="1">
        <label>HT_users.c</label>
        <link refid="HT__users_8c"/>
        <childnode refid="2" relation="include">
        </childnode>
        <childnode refid="10" relation="include">
        </childnode>
        <childnode refid="9" relation="include">
        </childnode>
        <childnode refid="7" relation="include">
        </childnode>
      </node>
      <node id="2">
        <label>HT_users.h</label>
        <link refid="HT__users_8h"/>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="4" relation="include">
        </childnode>
        <childnode refid="5" relation="include">
        </childnode>
        <childnode refid="6" relation="include">
        </childnode>
        <childnode refid="7" relation="include">
        </childnode>
        <childnode refid="9" relation="include">
        </childnode>
      </node>
      <node id="5">
        <label>string.h</label>
      </node>
      <node id="7">
        <label>auxiliarTree.h</label>
        <link refid="auxiliarTree_8h"/>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="4" relation="include">
        </childnode>
        <childnode refid="5" relation="include">
        </childnode>
        <childnode refid="8" relation="include">
        </childnode>
      </node>
      <node id="6">
        <label>time.h</label>
      </node>
      <node id="8">
        <label>math.h</label>
      </node>
      <node id="10">
        <label>auxiliarFunc.h</label>
        <link refid="auxiliarFunc_8h"/>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="5" relation="include">
        </childnode>
        <childnode refid="4" relation="include">
        </childnode>
        <childnode refid="6" relation="include">
        </childnode>
      </node>
      <node id="3">
        <label>stdio.h</label>
      </node>
    </incdepgraph>
    <innerclass refid="structHashTableUser" prot="public">HashTableUser</innerclass>
      <sectiondef kind="func">
      <memberdef kind="function" id="HT__users_8c_1ac8b92e3deef2ea06588f9cc685cb3c13" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void init_HashTableUsers</definition>
        <argsstring>(HT_Users *hash)</argsstring>
        <name>init_HashTableUsers</name>
        <param>
          <type><ref refid="HT__users_8h_1a60c017eb07df48e30ae895c8a7eeb82d" kindref="member">HT_Users</ref> *</type>
          <declname>hash</declname>
        </param>
        <briefdescription>
<para>Função que inicializa a Hashtable dos users. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>hash</parametername>
</parameternamelist>
<parameterdescription>
<para>Hashtable dos users </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="HT_users.c" line="39" column="6" bodyfile="HT_users.c" bodystart="39" bodyend="43"/>
      </memberdef>
      <memberdef kind="function" id="HT__users_8c_1a91efb0a7516eeaf42e2921e666f5b920" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void print_tableUsers</definition>
        <argsstring>(HT_Users *hash)</argsstring>
        <name>print_tableUsers</name>
        <param>
          <type><ref refid="HT__users_8h_1a60c017eb07df48e30ae895c8a7eeb82d" kindref="member">HT_Users</ref> *</type>
          <declname>hash</declname>
        </param>
        <briefdescription>
<para>Função que imprime no terminal a Hashtable dos users. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>hash</parametername>
</parameternamelist>
<parameterdescription>
<para>Hashtable dos users </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="HT_users.c" line="50" column="6" bodyfile="HT_users.c" bodystart="50" bodyend="67"/>
      </memberdef>
      <memberdef kind="function" id="HT__users_8c_1a5ab32ec89aa833d35727ac4ed0f87bc3" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int insert_HashTableUsers</definition>
        <argsstring>(HT_Users *hash, HT_Users node)</argsstring>
        <name>insert_HashTableUsers</name>
        <param>
          <type><ref refid="HT__users_8h_1a60c017eb07df48e30ae895c8a7eeb82d" kindref="member">HT_Users</ref> *</type>
          <declname>hash</declname>
        </param>
        <param>
          <type><ref refid="HT__users_8h_1a60c017eb07df48e30ae895c8a7eeb82d" kindref="member">HT_Users</ref></type>
          <declname>node</declname>
        </param>
        <briefdescription>
<para>Função que insere elementos na Hashtable dos users. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>hash</parametername>
</parameternamelist>
<parameterdescription>
<para>Hashtable dos users</para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>node</parametername>
</parameternamelist>
<parameterdescription>
<para>Nodo a inserir na Hashtable</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Retorna 1 quando o nodo é bem inserido </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="HT_users.c" line="78" column="5" bodyfile="HT_users.c" bodystart="78" bodyend="85"/>
      </memberdef>
      <memberdef kind="function" id="HT__users_8c_1ac4a0b761f63a940b365c74b51cf91f8e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="HT__users_8h_1a60c017eb07df48e30ae895c8a7eeb82d" kindref="member">HT_Users</ref></type>
        <definition>HT_Users find_HashTableUsers</definition>
        <argsstring>(HT_Users *hash, char *id)</argsstring>
        <name>find_HashTableUsers</name>
        <param>
          <type><ref refid="HT__users_8h_1a60c017eb07df48e30ae895c8a7eeb82d" kindref="member">HT_Users</ref> *</type>
          <declname>hash</declname>
        </param>
        <param>
          <type>char *</type>
          <declname>id</declname>
        </param>
        <briefdescription>
<para>Função que encontra o endereço de um determinado elemento da Hashtable. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>hash</parametername>
</parameternamelist>
<parameterdescription>
<para>Hashtable dos users</para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>id</parametername>
</parameternamelist>
<parameterdescription>
<para>string com o ID a encontrar</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Retorna o endereço do nodo </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="HT_users.c" line="96" column="10" bodyfile="HT_users.c" bodystart="96" bodyend="103"/>
      </memberdef>
      <memberdef kind="function" id="HT__users_8c_1ae57dc7cc3dad65bff0ebbc611587b739" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int find_HashTableUsersBool</definition>
        <argsstring>(HT_Users *hash, char *id)</argsstring>
        <name>find_HashTableUsersBool</name>
        <param>
          <type><ref refid="HT__users_8h_1a60c017eb07df48e30ae895c8a7eeb82d" kindref="member">HT_Users</ref> *</type>
          <declname>hash</declname>
        </param>
        <param>
          <type>char *</type>
          <declname>id</declname>
        </param>
        <briefdescription>
<para>Função que permite saber se o ID se encontra na Hashtable. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>hash</parametername>
</parameternamelist>
<parameterdescription>
<para>Lista ligada da Hashtable</para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>id</parametername>
</parameternamelist>
<parameterdescription>
<para>String com o ID a encontrar</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Retorna 0 se encontrar </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="HT_users.c" line="114" column="5" bodyfile="HT_users.c" bodystart="114" bodyend="123"/>
      </memberdef>
      <memberdef kind="function" id="HT__users_8c_1a102f09769b656795cdf892e1145a4063" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void incrementAuxCount</definition>
        <argsstring>(HT_Users *hash, char *id)</argsstring>
        <name>incrementAuxCount</name>
        <param>
          <type><ref refid="HT__users_8h_1a60c017eb07df48e30ae895c8a7eeb82d" kindref="member">HT_Users</ref> *</type>
          <declname>hash</declname>
        </param>
        <param>
          <type>char *</type>
          <declname>id</declname>
        </param>
        <briefdescription>
<para>Função que incrementa o valor do contador de ocorrências de um nodo da Hashtable dos users. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>hash</parametername>
</parameternamelist>
<parameterdescription>
<para>Hashtable dos users</para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>id</parametername>
</parameternamelist>
<parameterdescription>
<para>String que contém o ID do auxCount do usuário a incrementar </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="HT_users.c" line="132" column="6" bodyfile="HT_users.c" bodystart="132" bodyend="141"/>
      </memberdef>
      <memberdef kind="function" id="HT__users_8c_1a69233cd7c7aee2aa886ccca24d47a63e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="HT__users_8h_1a60c017eb07df48e30ae895c8a7eeb82d" kindref="member">HT_Users</ref></type>
        <definition>HT_Users find_HashTableUsersKey</definition>
        <argsstring>(HT_Users *hash, int key)</argsstring>
        <name>find_HashTableUsersKey</name>
        <param>
          <type><ref refid="HT__users_8h_1a60c017eb07df48e30ae895c8a7eeb82d" kindref="member">HT_Users</ref> *</type>
          <declname>hash</declname>
        </param>
        <param>
          <type>int</type>
          <declname>key</declname>
        </param>
        <briefdescription>
<para>Função que encontra um nodo copiado de um determinado elemento na Hashtable. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>hash</parametername>
</parameternamelist>
<parameterdescription>
<para>Hashtable dos repositórios</para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>key</parametername>
</parameternamelist>
<parameterdescription>
<para>Índice do elemento a encontrar</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Retorna o endereço do nodo </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="HT_users.c" line="153" column="10" bodyfile="HT_users.c" bodystart="153" bodyend="158"/>
      </memberdef>
      <memberdef kind="function" id="HT__users_8c_1a1800f1e07660fb9ac471475f2889018c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="HT__users_8h_1a60c017eb07df48e30ae895c8a7eeb82d" kindref="member">HT_Users</ref></type>
        <definition>HT_Users obtain_nextUser</definition>
        <argsstring>(HT_Users user)</argsstring>
        <name>obtain_nextUser</name>
        <param>
          <type><ref refid="HT__users_8h_1a60c017eb07df48e30ae895c8a7eeb82d" kindref="member">HT_Users</ref></type>
          <declname>user</declname>
        </param>
        <briefdescription>
<para>Função que permite obter o próximo elemento da lista ligada da Hashtable. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>user</parametername>
</parameternamelist>
<parameterdescription>
<para>Lista ligada da Hashtable</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Retorna o endereço do nodo seguinte </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="HT_users.c" line="167" column="10" bodyfile="HT_users.c" bodystart="167" bodyend="172"/>
      </memberdef>
      <memberdef kind="function" id="HT__users_8c_1ae469c2feb77ccc29bdfe96f86e5f741a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>char *</type>
        <definition>char* obtain_userType</definition>
        <argsstring>(HT_Users user)</argsstring>
        <name>obtain_userType</name>
        <param>
          <type><ref refid="HT__users_8h_1a60c017eb07df48e30ae895c8a7eeb82d" kindref="member">HT_Users</ref></type>
          <declname>user</declname>
        </param>
        <briefdescription>
<para>Função que permite obter o tipo de utilizador. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>user</parametername>
</parameternamelist>
<parameterdescription>
<para>Lista ligada da Hashtable</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Retorna uma cópia da string com o tipo de utilizador </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="HT_users.c" line="181" column="6" bodyfile="HT_users.c" bodystart="181" bodyend="184"/>
      </memberdef>
      <memberdef kind="function" id="HT__users_8c_1abb1026ee15b7d4a5792b5ea205b28863" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>char *</type>
        <definition>char* obtain_userId</definition>
        <argsstring>(HT_Users user)</argsstring>
        <name>obtain_userId</name>
        <param>
          <type><ref refid="HT__users_8h_1a60c017eb07df48e30ae895c8a7eeb82d" kindref="member">HT_Users</ref></type>
          <declname>user</declname>
        </param>
        <briefdescription>
<para>Função que permite obter o ID do utilizador. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>user</parametername>
</parameternamelist>
<parameterdescription>
<para>Lista ligada da Hashtable</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Retorna uma cópia da string com o ID de utilizador </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="HT_users.c" line="193" column="6" bodyfile="HT_users.c" bodystart="193" bodyend="196"/>
      </memberdef>
      <memberdef kind="function" id="HT__users_8c_1aa8b0234a175bc8639d7b46b68e1c939b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>char *</type>
        <definition>char* obtain_userLogin</definition>
        <argsstring>(HT_Users user)</argsstring>
        <name>obtain_userLogin</name>
        <param>
          <type><ref refid="HT__users_8h_1a60c017eb07df48e30ae895c8a7eeb82d" kindref="member">HT_Users</ref></type>
          <declname>user</declname>
        </param>
        <briefdescription>
<para>Função que permite obter o login de utilizador. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>user</parametername>
</parameternamelist>
<parameterdescription>
<para>Lista ligada da Hashtable</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Retorna uma cópia da string com o login de utilizador </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="HT_users.c" line="205" column="6" bodyfile="HT_users.c" bodystart="205" bodyend="208"/>
      </memberdef>
      <memberdef kind="function" id="HT__users_8c_1af40ce803abb0554f370e70435ff92f86" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int obtain_userAuxCount</definition>
        <argsstring>(HT_Users user)</argsstring>
        <name>obtain_userAuxCount</name>
        <param>
          <type><ref refid="HT__users_8h_1a60c017eb07df48e30ae895c8a7eeb82d" kindref="member">HT_Users</ref></type>
          <declname>user</declname>
        </param>
        <briefdescription>
<para>Função que permite obter o campo auxCount do utilizador. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>user</parametername>
</parameternamelist>
<parameterdescription>
<para>Lista ligada da Hashtable</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Retorna o valor do auxCount do utilizador </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="HT_users.c" line="217" column="5" bodyfile="HT_users.c" bodystart="217" bodyend="220"/>
      </memberdef>
      <memberdef kind="function" id="HT__users_8c_1acbe8acfaf0364325683bf12562235574" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="HT__users_8h_1a60c017eb07df48e30ae895c8a7eeb82d" kindref="member">HT_Users</ref></type>
        <definition>HT_Users listU</definition>
        <argsstring>(HT_Users users)</argsstring>
        <name>listU</name>
        <param>
          <type><ref refid="HT__users_8h_1a60c017eb07df48e30ae895c8a7eeb82d" kindref="member">HT_Users</ref></type>
          <declname>users</declname>
        </param>
        <briefdescription>
<para>Função que permite copiar a informação de um nodo para outro. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>users</parametername>
</parameternamelist>
<parameterdescription>
<para>Nodo a copiar</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Retorna o novo nodo </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="HT_users.c" line="229" column="10" bodyfile="HT_users.c" bodystart="229" bodyend="243"/>
      </memberdef>
      <memberdef kind="function" id="HT__users_8c_1a2e23a36de5e89d02810a676d6a2f8a93" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void handle_UsersFile</definition>
        <argsstring>(FILE *file, HT_Users *users)</argsstring>
        <name>handle_UsersFile</name>
        <param>
          <type>FILE *</type>
          <declname>file</declname>
        </param>
        <param>
          <type><ref refid="HT__users_8h_1a60c017eb07df48e30ae895c8a7eeb82d" kindref="member">HT_Users</ref> *</type>
          <declname>users</declname>
        </param>
        <briefdescription>
<para>Função que permite fazer a verificação do ficheiros dos users e a criação do catálogo. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>file</parametername>
</parameternamelist>
<parameterdescription>
<para>Ficheiro a verificar e guardar</para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>users</parametername>
</parameternamelist>
<parameterdescription>
<para>Hashtable dos users para fazer a verificação </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="HT_users.c" line="252" column="6" bodyfile="HT_users.c" bodystart="252" bodyend="328"/>
      </memberdef>
      <memberdef kind="function" id="HT__users_8c_1a6e4793c50a48dd2f74ee37515af9767e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void resetUsersCounter</definition>
        <argsstring>(HT_Users *hash)</argsstring>
        <name>resetUsersCounter</name>
        <param>
          <type><ref refid="HT__users_8h_1a60c017eb07df48e30ae895c8a7eeb82d" kindref="member">HT_Users</ref> *</type>
          <declname>hash</declname>
        </param>
        <briefdescription>
<para>Função que permite o reset do campo auxCount. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>hash</parametername>
</parameternamelist>
<parameterdescription>
<para>Hashtable dos users </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="HT_users.c" line="335" column="6" bodyfile="HT_users.c" bodystart="335" bodyend="347"/>
      </memberdef>
      <memberdef kind="function" id="HT__users_8c_1af8f08d0e64f91220a1370b545bc5177d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>char *</type>
        <definition>char* find_userFollowers</definition>
        <argsstring>(HT_Users *users, char *id)</argsstring>
        <name>find_userFollowers</name>
        <param>
          <type><ref refid="HT__users_8h_1a60c017eb07df48e30ae895c8a7eeb82d" kindref="member">HT_Users</ref> *</type>
          <declname>users</declname>
        </param>
        <param>
          <type>char *</type>
          <declname>id</declname>
        </param>
        <briefdescription>
<para>Função que permite obter o número de seguidores de um utilizador em específico. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>users</parametername>
</parameternamelist>
<parameterdescription>
<para>Hashtable dos users</para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>id</parametername>
</parameternamelist>
<parameterdescription>
<para>String com o ID do utilizador</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Retorna uma cópia da string com o número de seguidores </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="HT_users.c" line="358" column="6" bodyfile="HT_users.c" bodystart="358" bodyend="368"/>
      </memberdef>
      <memberdef kind="function" id="HT__users_8c_1a066995ca50e5385cfb6376bf1b6ce055" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>char *</type>
        <definition>char* find_userFollowing</definition>
        <argsstring>(HT_Users *users, char *id)</argsstring>
        <name>find_userFollowing</name>
        <param>
          <type><ref refid="HT__users_8h_1a60c017eb07df48e30ae895c8a7eeb82d" kindref="member">HT_Users</ref> *</type>
          <declname>users</declname>
        </param>
        <param>
          <type>char *</type>
          <declname>id</declname>
        </param>
        <briefdescription>
<para>Função que permite obter o número de pessoas a seguir de um utilizador em específico. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>users</parametername>
</parameternamelist>
<parameterdescription>
<para>Hashtable dos users</para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>id</parametername>
</parameternamelist>
<parameterdescription>
<para>String com o ID do utilizador</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Retorna uma cópia da string com o número de pessoas a seguir </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="HT_users.c" line="379" column="6" bodyfile="HT_users.c" bodystart="379" bodyend="388"/>
      </memberdef>
      <memberdef kind="function" id="HT__users_8c_1a36e191eaf5102e1b5806ca40df39354f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>char *</type>
        <definition>char* find_userFollowersList</definition>
        <argsstring>(HT_Users *users, char *id)</argsstring>
        <name>find_userFollowersList</name>
        <param>
          <type><ref refid="HT__users_8h_1a60c017eb07df48e30ae895c8a7eeb82d" kindref="member">HT_Users</ref> *</type>
          <declname>users</declname>
        </param>
        <param>
          <type>char *</type>
          <declname>id</declname>
        </param>
        <briefdescription>
<para>Função que permite obter a lista de seguidores de um usuário em específico. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>users</parametername>
</parameternamelist>
<parameterdescription>
<para>Hashtable dos users</para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>id</parametername>
</parameternamelist>
<parameterdescription>
<para>String com o ID de utilizador</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Retorna uma cópia da string com a lista de seguidores </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="HT_users.c" line="399" column="6" bodyfile="HT_users.c" bodystart="399" bodyend="408"/>
      </memberdef>
      <memberdef kind="function" id="HT__users_8c_1a772853896c4c8006e50e73f9a6c527f1" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>char *</type>
        <definition>char* find_userFollowingList</definition>
        <argsstring>(HT_Users *users, char *id)</argsstring>
        <name>find_userFollowingList</name>
        <param>
          <type><ref refid="HT__users_8h_1a60c017eb07df48e30ae895c8a7eeb82d" kindref="member">HT_Users</ref> *</type>
          <declname>users</declname>
        </param>
        <param>
          <type>char *</type>
          <declname>id</declname>
        </param>
        <briefdescription>
<para>Função que permite obter a lista de pessoas a seguir de um usuário em específico. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>users</parametername>
</parameternamelist>
<parameterdescription>
<para>Hashtable dos users</para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>id</parametername>
</parameternamelist>
<parameterdescription>
<para>String com o ID de utilizador</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Retorna uma cópia da string com a lista de pessoas a seguir </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="HT_users.c" line="419" column="6" bodyfile="HT_users.c" bodystart="419" bodyend="428"/>
      </memberdef>
      <memberdef kind="function" id="HT__users_8c_1a1720390cad03b26a5eca8b17b4274f60" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>char *</type>
        <definition>char* find_userLogin</definition>
        <argsstring>(HT_Users *users, char *id)</argsstring>
        <name>find_userLogin</name>
        <param>
          <type><ref refid="HT__users_8h_1a60c017eb07df48e30ae895c8a7eeb82d" kindref="member">HT_Users</ref> *</type>
          <declname>users</declname>
        </param>
        <param>
          <type>char *</type>
          <declname>id</declname>
        </param>
        <briefdescription>
<para>Função que permite obter o login de um utilizador em específico. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>users</parametername>
</parameternamelist>
<parameterdescription>
<para>Hashtable dos users</para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>id</parametername>
</parameternamelist>
<parameterdescription>
<para>String com o ID de utilizador</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Retorna uma cópia da string com o login do utilizador </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="HT_users.c" line="439" column="6" bodyfile="HT_users.c" bodystart="439" bodyend="448"/>
      </memberdef>
      <memberdef kind="function" id="HT__users_8c_1ab88e91ff6dd53dc80de2e45b846cf5b3" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int countTypeBots</definition>
        <argsstring>(HT_Users *users)</argsstring>
        <name>countTypeBots</name>
        <param>
          <type><ref refid="HT__users_8h_1a60c017eb07df48e30ae895c8a7eeb82d" kindref="member">HT_Users</ref> *</type>
          <declname>users</declname>
        </param>
        <briefdescription>
<para>Função que conta o número de utilizadores do tipo Bot. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>users</parametername>
</parameternamelist>
<parameterdescription>
<para>Hashtable dos users</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Retorna o número de utilizadores do tipo Bot </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="HT_users.c" line="457" column="5" bodyfile="HT_users.c" bodystart="457" bodyend="476"/>
      </memberdef>
      <memberdef kind="function" id="HT__users_8c_1a28496df300b04743b54c869ec53474ca" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int countTypeOrganizations</definition>
        <argsstring>(HT_Users *users)</argsstring>
        <name>countTypeOrganizations</name>
        <param>
          <type><ref refid="HT__users_8h_1a60c017eb07df48e30ae895c8a7eeb82d" kindref="member">HT_Users</ref> *</type>
          <declname>users</declname>
        </param>
        <briefdescription>
<para>Função que conta o número de utilizadores do tipo Organization. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>users</parametername>
</parameternamelist>
<parameterdescription>
<para>Hashtable dos users</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Retorna o número de utilizadores do tipo Organization </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="HT_users.c" line="485" column="5" bodyfile="HT_users.c" bodystart="485" bodyend="504"/>
      </memberdef>
      <memberdef kind="function" id="HT__users_8c_1a65e9b28917c7bb36f47ddbdea16a0886" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int countTypeUsers</definition>
        <argsstring>(HT_Users *users)</argsstring>
        <name>countTypeUsers</name>
        <param>
          <type><ref refid="HT__users_8h_1a60c017eb07df48e30ae895c8a7eeb82d" kindref="member">HT_Users</ref> *</type>
          <declname>users</declname>
        </param>
        <briefdescription>
<para>Função que conta o número de utilizadores do tipo User. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>users</parametername>
</parameternamelist>
<parameterdescription>
<para>Hashtable dos users</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Retorna o número de utilizadores do tipo User </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="HT_users.c" line="513" column="5" bodyfile="HT_users.c" bodystart="513" bodyend="532"/>
      </memberdef>
      <memberdef kind="function" id="HT__users_8c_1addbc4933953789669785fce58babbf77" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="auxiliarTree_8h_1ac0e4efc186caf2b97b1366033992c135" kindref="member">TREE</ref></type>
        <definition>TREE countBotsTree</definition>
        <argsstring>(HT_Users *users, TREE bots)</argsstring>
        <name>countBotsTree</name>
        <param>
          <type><ref refid="HT__users_8h_1a60c017eb07df48e30ae895c8a7eeb82d" kindref="member">HT_Users</ref> *</type>
          <declname>users</declname>
        </param>
        <param>
          <type><ref refid="auxiliarTree_8h_1ac0e4efc186caf2b97b1366033992c135" kindref="member">TREE</ref></type>
          <declname>bots</declname>
        </param>
        <briefdescription>
<para>Função que guarda numa árvore binária os ID&apos;s dos utilizadores do tipo Bot. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>users</parametername>
</parameternamelist>
<parameterdescription>
<para>Hashtable dos users</para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>bots</parametername>
</parameternamelist>
<parameterdescription>
<para>Árvore onde irão ser guardados os ID&apos;s</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Retorna a árvore com a informação pretendida </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="HT_users.c" line="543" column="6" bodyfile="HT_users.c" bodystart="543" bodyend="567"/>
      </memberdef>
      <memberdef kind="function" id="HT__users_8c_1a1e74c9c89c0359ab5b9f7342c48a6226" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="auxiliarTree_8h_1ac0e4efc186caf2b97b1366033992c135" kindref="member">TREE</ref></type>
        <definition>TREE friendsTree</definition>
        <argsstring>(HT_Users *users, char *id, int *k)</argsstring>
        <name>friendsTree</name>
        <param>
          <type><ref refid="HT__users_8h_1a60c017eb07df48e30ae895c8a7eeb82d" kindref="member">HT_Users</ref> *</type>
          <declname>users</declname>
        </param>
        <param>
          <type>char *</type>
          <declname>id</declname>
        </param>
        <param>
          <type>int *</type>
          <declname>k</declname>
        </param>
        <briefdescription>
<para>Função que cria uma árvore com os amigos de um determinado user. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>users</parametername>
</parameternamelist>
<parameterdescription>
<para>Hashtable dos users</para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>id</parametername>
</parameternamelist>
<parameterdescription>
<para>String com o ID do utilizador</para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>k</parametername>
</parameternamelist>
<parameterdescription>
<para>Flag para o caso de o número de followers ou following ser 0</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Retorna a árvore dos amigos. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="HT_users.c" line="580" column="6" bodyfile="HT_users.c" bodystart="580" bodyend="618"/>
      </memberdef>
      <memberdef kind="function" id="HT__users_8c_1ae71e01f34dda9f4ed92fefab919d8a94" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>float</type>
        <definition>float countUsers</definition>
        <argsstring>(HT_Users *users)</argsstring>
        <name>countUsers</name>
        <param>
          <type><ref refid="HT__users_8h_1a60c017eb07df48e30ae895c8a7eeb82d" kindref="member">HT_Users</ref> *</type>
          <declname>users</declname>
        </param>
        <briefdescription>
<para>Função que conta o número de utilizadores existentes no catálogo. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>users</parametername>
</parameternamelist>
<parameterdescription>
<para>Hashtable de users</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Retorna o número de utilizadores existentes </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="HT_users.c" line="627" column="7" bodyfile="HT_users.c" bodystart="627" bodyend="644"/>
      </memberdef>
      <memberdef kind="function" id="HT__users_8c_1a656661bacae8cb37ac77d0b847cf80aa" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="auxiliarStruct_8h_1a48aa1db39f2f5469e456508832c9bcf6" kindref="member">TOPUSERSSTRUCT</ref></type>
        <definition>TOPUSERSSTRUCT activeUsers</definition>
        <argsstring>(HT_Users *users, TOPUSERSSTRUCT topUsers, int N)</argsstring>
        <name>activeUsers</name>
        <param>
          <type><ref refid="HT__users_8h_1a60c017eb07df48e30ae895c8a7eeb82d" kindref="member">HT_Users</ref> *</type>
          <declname>users</declname>
        </param>
        <param>
          <type><ref refid="auxiliarStruct_8h_1a48aa1db39f2f5469e456508832c9bcf6" kindref="member">TOPUSERSSTRUCT</ref></type>
          <declname>topUsers</declname>
        </param>
        <param>
          <type>int</type>
          <declname>N</declname>
        </param>
        <briefdescription>
<para>Função que guarda num array de <ref refid="structtopUsersStruct" kindref="compound">topUsersStruct</ref> os top N utilizadores mais ativos(mais commits) </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>users</parametername>
</parameternamelist>
<parameterdescription>
<para>Hashtable dos users</para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>topUsers</parametername>
</parameternamelist>
<parameterdescription>
<para>Array de <ref refid="structtopUsersStruct" kindref="compound">topUsersStruct</ref> onde irá ser guardada a informação</para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>N</parametername>
</parameternamelist>
<parameterdescription>
<para>Tamanho do array/Top N utilizadores mais ativos</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Retorna o array com a informação guardada </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="HT_users.c" line="657" column="16" bodyfile="HT_users.c" bodystart="657" bodyend="694"/>
      </memberdef>
      <memberdef kind="function" id="HT__users_8c_1ac445186d64c181b493fed1ef07832abf" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void free_TableUsers</definition>
        <argsstring>(HT_Users *users)</argsstring>
        <name>free_TableUsers</name>
        <param>
          <type><ref refid="HT__users_8h_1a60c017eb07df48e30ae895c8a7eeb82d" kindref="member">HT_Users</ref> *</type>
          <declname>users</declname>
        </param>
        <briefdescription>
<para>Função que liberta a memória ocupada pela Hashtable dos users. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>users</parametername>
</parameternamelist>
<parameterdescription>
<para>Hashtable dos users </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="HT_users.c" line="701" column="6" bodyfile="HT_users.c" bodystart="701" bodyend="722"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"></codeline>
<codeline lineno="4"><highlight class="preprocessor">#include<sp/>&quot;<ref refid="HT__users_8h" kindref="compound">HT_users.h</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="auxiliarFunc_8h" kindref="compound">auxiliarFunc.h</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="auxiliarStruct_8h" kindref="compound">auxiliarStruct.h</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="auxiliarTree_8h" kindref="compound">auxiliarTree.h</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="8"><highlight class="normal"></highlight></codeline>
<codeline lineno="12" refid="structHashTableUser" refkind="compound"><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structHashTableUser" kindref="compound">HashTableUser</ref></highlight></codeline>
<codeline lineno="13"><highlight class="normal">{</highlight></codeline>
<codeline lineno="15"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*<ref refid="structHashTableUser_1a6e6d25dda851a2881e407bd0adbefd04" kindref="member">id</ref>;</highlight></codeline>
<codeline lineno="17"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*<ref refid="structHashTableUser_1a4411a042b64d1b913581de7ca24863af" kindref="member">login</ref>;</highlight></codeline>
<codeline lineno="19"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*<ref refid="structHashTableUser_1ad8f2a7cd7e1a1267112675ebad4ec120" kindref="member">type</ref>;</highlight></codeline>
<codeline lineno="21"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*<ref refid="structHashTableUser_1a31a2e2e93ce937b120ce5a0eb3a9fc0c" kindref="member">followers</ref>;</highlight></codeline>
<codeline lineno="23"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*<ref refid="structHashTableUser_1a346618057e1a56491b7d5aa662481353" kindref="member">followers_list</ref>;</highlight></codeline>
<codeline lineno="25"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*<ref refid="structHashTableUser_1ac78d224baf010eab8208104ac2080591" kindref="member">following</ref>;</highlight></codeline>
<codeline lineno="27"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*<ref refid="structHashTableUser_1aa6f42e4d3e8cbc4f3b92f68d54400707" kindref="member">following_list</ref>;</highlight></codeline>
<codeline lineno="29"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="structHashTableUser_1a6aed6b9ce8cc5c87f4fd4c6931b537a8" kindref="member">auxCount</ref>;</highlight></codeline>
<codeline lineno="31"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structHashTableUser" kindref="compound">HashTableUser</ref><sp/>*<ref refid="structHashTableUser_1a3c5f877d02e79f1c7f6e55c682a425db" kindref="member">next</ref>;</highlight></codeline>
<codeline lineno="32"><highlight class="normal">};</highlight></codeline>
<codeline lineno="33"><highlight class="normal"></highlight></codeline>
<codeline lineno="39"><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="HT__users_8c_1ac8b92e3deef2ea06588f9cc685cb3c13" kindref="member">init_HashTableUsers</ref>(<ref refid="structHashTableUser" kindref="compound">HT_Users</ref><sp/>*hash)</highlight></codeline>
<codeline lineno="40"><highlight class="normal">{</highlight></codeline>
<codeline lineno="41"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/><ref refid="auxiliarFunc_8h_1a032503e76d6f69bc67e99e909c8125da" kindref="member">TABLE_SIZE</ref>;<sp/>i++)</highlight></codeline>
<codeline lineno="42"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>hash[i]<sp/>=<sp/>NULL;<sp/></highlight></codeline>
<codeline lineno="43"><highlight class="normal">}</highlight></codeline>
<codeline lineno="44"><highlight class="normal"></highlight></codeline>
<codeline lineno="50"><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="HT__users_8c_1a91efb0a7516eeaf42e2921e666f5b920" kindref="member">print_tableUsers</ref>(<ref refid="structHashTableUser" kindref="compound">HT_Users</ref><sp/>*hash)</highlight></codeline>
<codeline lineno="51"><highlight class="normal">{</highlight></codeline>
<codeline lineno="52"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/><ref refid="auxiliarFunc_8h_1a032503e76d6f69bc67e99e909c8125da" kindref="member">TABLE_SIZE</ref>;<sp/>i++)</highlight></codeline>
<codeline lineno="53"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="54"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(hash[i]<sp/>==<sp/>NULL){</highlight></codeline>
<codeline lineno="55"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>printf(</highlight><highlight class="stringliteral">&quot;\t%d\t---\n&quot;</highlight><highlight class="normal">,<sp/>i);</highlight></codeline>
<codeline lineno="56"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="57"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>printf(</highlight><highlight class="stringliteral">&quot;\t%d\t<sp/>&quot;</highlight><highlight class="normal">,<sp/>i);</highlight></codeline>
<codeline lineno="58"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structHashTableUser" kindref="compound">HT_Users</ref><sp/>aux<sp/>=<sp/>hash[i];</highlight></codeline>
<codeline lineno="59"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(aux<sp/>!=<sp/>NULL)</highlight></codeline>
<codeline lineno="60"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="61"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>printf(</highlight><highlight class="stringliteral">&quot;<sp/>%s<sp/>-<sp/>%d<sp/>-<sp/>&quot;</highlight><highlight class="normal">,<sp/>aux-&gt;<ref refid="structHashTableUser_1a6e6d25dda851a2881e407bd0adbefd04" kindref="member">id</ref>,<sp/>aux-&gt;<ref refid="structHashTableUser_1a6aed6b9ce8cc5c87f4fd4c6931b537a8" kindref="member">auxCount</ref>);</highlight></codeline>
<codeline lineno="62"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>aux<sp/>=<sp/>aux-&gt;<ref refid="structHashTableUser_1a3c5f877d02e79f1c7f6e55c682a425db" kindref="member">next</ref>;</highlight></codeline>
<codeline lineno="63"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="64"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>printf(</highlight><highlight class="stringliteral">&quot;\n&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="65"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="66"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="67"><highlight class="normal">}</highlight></codeline>
<codeline lineno="68"><highlight class="normal"></highlight></codeline>
<codeline lineno="78"><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="HT__users_8c_1a5ab32ec89aa833d35727ac4ed0f87bc3" kindref="member">insert_HashTableUsers</ref>(<ref refid="structHashTableUser" kindref="compound">HT_Users</ref><sp/>*hash,<sp/><ref refid="structHashTableUser" kindref="compound">HT_Users</ref><sp/>node)</highlight></codeline>
<codeline lineno="79"><highlight class="normal">{</highlight></codeline>
<codeline lineno="80"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(hash<sp/>==<sp/>NULL)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>0;</highlight></codeline>
<codeline lineno="81"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>key<sp/>=<sp/><ref refid="auxiliarFunc_8c_1a2dbcb08eb0c82000bf354bb3a0d66e95" kindref="member">hash_key</ref>(strdup(node-&gt;<ref refid="structHashTableUser_1a6e6d25dda851a2881e407bd0adbefd04" kindref="member">id</ref>));</highlight></codeline>
<codeline lineno="82"><highlight class="normal"><sp/><sp/><sp/><sp/>node-&gt;<ref refid="structHashTableUser_1a3c5f877d02e79f1c7f6e55c682a425db" kindref="member">next</ref><sp/>=<sp/>hash[key];</highlight></codeline>
<codeline lineno="83"><highlight class="normal"><sp/><sp/><sp/><sp/>hash[key]<sp/>=<sp/>node;</highlight></codeline>
<codeline lineno="84"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>1;</highlight></codeline>
<codeline lineno="85"><highlight class="normal">}</highlight></codeline>
<codeline lineno="86"><highlight class="normal"></highlight></codeline>
<codeline lineno="96"><highlight class="normal"><ref refid="structHashTableUser" kindref="compound">HT_Users</ref><sp/><ref refid="HT__users_8c_1ac4a0b761f63a940b365c74b51cf91f8e" kindref="member">find_HashTableUsers</ref>(<ref refid="structHashTableUser" kindref="compound">HT_Users</ref><sp/>*hash,<sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*</highlight><highlight class="keywordtype">id</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="97"><highlight class="normal">{</highlight></codeline>
<codeline lineno="98"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>key<sp/>=<sp/><ref refid="auxiliarFunc_8c_1a2dbcb08eb0c82000bf354bb3a0d66e95" kindref="member">hash_key</ref>(</highlight><highlight class="keywordtype">id</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="99"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structHashTableUser" kindref="compound">HT_Users</ref><sp/>aux<sp/>=<sp/>hash[key];</highlight></codeline>
<codeline lineno="100"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(aux<sp/>!=<sp/>NULL<sp/>&amp;&amp;<sp/>strcmp(aux-&gt;<ref refid="structHashTableUser_1a6e6d25dda851a2881e407bd0adbefd04" kindref="member">id</ref>,<sp/></highlight><highlight class="keywordtype">id</highlight><highlight class="normal">)<sp/>!=<sp/>0)</highlight></codeline>
<codeline lineno="101"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>aux<sp/>=<sp/>aux-&gt;<ref refid="structHashTableUser_1a3c5f877d02e79f1c7f6e55c682a425db" kindref="member">next</ref>;</highlight></codeline>
<codeline lineno="102"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>aux;</highlight></codeline>
<codeline lineno="103"><highlight class="normal">}</highlight></codeline>
<codeline lineno="104"><highlight class="normal"></highlight></codeline>
<codeline lineno="114"><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="HT__users_8c_1ae57dc7cc3dad65bff0ebbc611587b739" kindref="member">find_HashTableUsersBool</ref>(<ref refid="structHashTableUser" kindref="compound">HT_Users</ref><sp/>*hash,<sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*</highlight><highlight class="keywordtype">id</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="115"><highlight class="normal">{</highlight></codeline>
<codeline lineno="116"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>key<sp/>=<sp/><ref refid="auxiliarFunc_8c_1a2dbcb08eb0c82000bf354bb3a0d66e95" kindref="member">hash_key</ref>(</highlight><highlight class="keywordtype">id</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="117"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structHashTableUser" kindref="compound">HT_Users</ref><sp/>aux<sp/>=<sp/>hash[key];</highlight></codeline>
<codeline lineno="118"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(aux<sp/>!=<sp/>NULL<sp/>&amp;&amp;<sp/>strcmp(aux-&gt;<ref refid="structHashTableUser_1a6e6d25dda851a2881e407bd0adbefd04" kindref="member">id</ref>,<sp/></highlight><highlight class="keywordtype">id</highlight><highlight class="normal">)<sp/>!=<sp/>0)</highlight></codeline>
<codeline lineno="119"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>aux<sp/>=<sp/>aux-&gt;<ref refid="structHashTableUser_1a3c5f877d02e79f1c7f6e55c682a425db" kindref="member">next</ref>;</highlight></codeline>
<codeline lineno="120"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(aux!=NULL)</highlight></codeline>
<codeline lineno="121"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>0;</highlight></codeline>
<codeline lineno="122"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>1;</highlight></codeline>
<codeline lineno="123"><highlight class="normal">}</highlight></codeline>
<codeline lineno="124"><highlight class="normal"></highlight></codeline>
<codeline lineno="132"><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="HT__users_8c_1a102f09769b656795cdf892e1145a4063" kindref="member">incrementAuxCount</ref><sp/>(<ref refid="structHashTableUser" kindref="compound">HT_Users</ref><sp/>*hash,<sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*</highlight><highlight class="keywordtype">id</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="133"><highlight class="normal">{</highlight></codeline>
<codeline lineno="134"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>key<sp/>=<sp/><ref refid="auxiliarFunc_8c_1a2dbcb08eb0c82000bf354bb3a0d66e95" kindref="member">hash_key</ref>(</highlight><highlight class="keywordtype">id</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="135"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structHashTableUser" kindref="compound">HT_Users</ref><sp/>aux<sp/>=<sp/>hash[key];</highlight></codeline>
<codeline lineno="136"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(aux<sp/>!=<sp/>NULL<sp/>&amp;&amp;<sp/>strcmp(aux-&gt;<ref refid="structHashTableUser_1a6e6d25dda851a2881e407bd0adbefd04" kindref="member">id</ref>,<sp/></highlight><highlight class="keywordtype">id</highlight><highlight class="normal">)<sp/>!=<sp/>0)</highlight></codeline>
<codeline lineno="137"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>aux<sp/>=<sp/>aux-&gt;<ref refid="structHashTableUser_1a3c5f877d02e79f1c7f6e55c682a425db" kindref="member">next</ref>;</highlight></codeline>
<codeline lineno="138"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(aux!=NULL)<sp/>{</highlight></codeline>
<codeline lineno="139"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>aux-&gt;<ref refid="structHashTableUser_1a6aed6b9ce8cc5c87f4fd4c6931b537a8" kindref="member">auxCount</ref>++;</highlight></codeline>
<codeline lineno="140"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="141"><highlight class="normal">}</highlight></codeline>
<codeline lineno="142"><highlight class="normal"></highlight></codeline>
<codeline lineno="143"><highlight class="normal"></highlight></codeline>
<codeline lineno="153"><highlight class="normal"><ref refid="structHashTableUser" kindref="compound">HT_Users</ref><sp/><ref refid="HT__users_8c_1a69233cd7c7aee2aa886ccca24d47a63e" kindref="member">find_HashTableUsersKey</ref>(<ref refid="structHashTableUser" kindref="compound">HT_Users</ref><sp/>*hash,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>key)</highlight></codeline>
<codeline lineno="154"><highlight class="normal">{</highlight></codeline>
<codeline lineno="155"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structHashTableUser" kindref="compound">HT_Users</ref><sp/>aux<sp/>=<sp/><ref refid="HT__users_8c_1acbe8acfaf0364325683bf12562235574" kindref="member">listU</ref>(hash[key]);</highlight></codeline>
<codeline lineno="156"><highlight class="normal"></highlight></codeline>
<codeline lineno="157"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>aux;</highlight></codeline>
<codeline lineno="158"><highlight class="normal">}</highlight></codeline>
<codeline lineno="159"><highlight class="normal"></highlight></codeline>
<codeline lineno="167"><highlight class="normal"><ref refid="structHashTableUser" kindref="compound">HT_Users</ref><sp/><ref refid="HT__users_8c_1a1800f1e07660fb9ac471475f2889018c" kindref="member">obtain_nextUser</ref>(<ref refid="structHashTableUser" kindref="compound">HT_Users</ref><sp/>user)</highlight></codeline>
<codeline lineno="168"><highlight class="normal">{</highlight></codeline>
<codeline lineno="169"><highlight class="normal"><sp/><sp/><sp/><sp/>user<sp/>=<sp/>user-&gt;<ref refid="structHashTableUser_1a3c5f877d02e79f1c7f6e55c682a425db" kindref="member">next</ref>;</highlight></codeline>
<codeline lineno="170"><highlight class="normal"></highlight></codeline>
<codeline lineno="171"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>user;</highlight></codeline>
<codeline lineno="172"><highlight class="normal">}</highlight></codeline>
<codeline lineno="173"><highlight class="normal"></highlight></codeline>
<codeline lineno="181"><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*<ref refid="HT__users_8c_1ae469c2feb77ccc29bdfe96f86e5f741a" kindref="member">obtain_userType</ref>(<ref refid="structHashTableUser" kindref="compound">HT_Users</ref><sp/>user)</highlight></codeline>
<codeline lineno="182"><highlight class="normal">{</highlight></codeline>
<codeline lineno="183"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>strdup(user-&gt;<ref refid="structHashTableUser_1ad8f2a7cd7e1a1267112675ebad4ec120" kindref="member">type</ref>);</highlight></codeline>
<codeline lineno="184"><highlight class="normal">}</highlight></codeline>
<codeline lineno="185"><highlight class="normal"></highlight></codeline>
<codeline lineno="193"><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*<ref refid="HT__users_8c_1abb1026ee15b7d4a5792b5ea205b28863" kindref="member">obtain_userId</ref>(<ref refid="structHashTableUser" kindref="compound">HT_Users</ref><sp/>user)</highlight></codeline>
<codeline lineno="194"><highlight class="normal">{</highlight></codeline>
<codeline lineno="195"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>strdup(user-&gt;<ref refid="structHashTableUser_1a6e6d25dda851a2881e407bd0adbefd04" kindref="member">id</ref>);</highlight></codeline>
<codeline lineno="196"><highlight class="normal">}</highlight></codeline>
<codeline lineno="197"><highlight class="normal"></highlight></codeline>
<codeline lineno="205"><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*<ref refid="HT__users_8c_1aa8b0234a175bc8639d7b46b68e1c939b" kindref="member">obtain_userLogin</ref>(<ref refid="structHashTableUser" kindref="compound">HT_Users</ref><sp/>user)</highlight></codeline>
<codeline lineno="206"><highlight class="normal">{</highlight></codeline>
<codeline lineno="207"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>strdup(user-&gt;<ref refid="structHashTableUser_1a4411a042b64d1b913581de7ca24863af" kindref="member">login</ref>);</highlight></codeline>
<codeline lineno="208"><highlight class="normal">}</highlight></codeline>
<codeline lineno="209"><highlight class="normal"></highlight></codeline>
<codeline lineno="217"><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="HT__users_8c_1af40ce803abb0554f370e70435ff92f86" kindref="member">obtain_userAuxCount</ref>(<ref refid="structHashTableUser" kindref="compound">HT_Users</ref><sp/>user)</highlight></codeline>
<codeline lineno="218"><highlight class="normal">{</highlight></codeline>
<codeline lineno="219"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(user-&gt;<ref refid="structHashTableUser_1a6aed6b9ce8cc5c87f4fd4c6931b537a8" kindref="member">auxCount</ref>);</highlight></codeline>
<codeline lineno="220"><highlight class="normal">}</highlight></codeline>
<codeline lineno="221"><highlight class="normal"></highlight></codeline>
<codeline lineno="229"><highlight class="normal"><ref refid="structHashTableUser" kindref="compound">HT_Users</ref><sp/><ref refid="HT__users_8c_1acbe8acfaf0364325683bf12562235574" kindref="member">listU</ref>(<ref refid="structHashTableUser" kindref="compound">HT_Users</ref><sp/>users)</highlight></codeline>
<codeline lineno="230"><highlight class="normal">{</highlight></codeline>
<codeline lineno="231"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(users==NULL)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>NULL;</highlight></codeline>
<codeline lineno="232"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structHashTableUser" kindref="compound">HT_Users</ref><sp/>targetList<sp/>=<sp/>malloc(</highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(</highlight><highlight class="keyword">struct</highlight><highlight class="normal"><sp/><ref refid="structHashTableUser" kindref="compound">HashTableUser</ref>));</highlight></codeline>
<codeline lineno="233"><highlight class="normal"><sp/><sp/><sp/><sp/>targetList-&gt;<ref refid="structHashTableUser_1a6e6d25dda851a2881e407bd0adbefd04" kindref="member">id</ref><sp/>=<sp/>strdup(users-&gt;<ref refid="structHashTableUser_1a6e6d25dda851a2881e407bd0adbefd04" kindref="member">id</ref>);</highlight></codeline>
<codeline lineno="234"><highlight class="normal"><sp/><sp/><sp/><sp/>targetList-&gt;<ref refid="structHashTableUser_1a4411a042b64d1b913581de7ca24863af" kindref="member">login</ref><sp/>=<sp/>strdup(users-&gt;<ref refid="structHashTableUser_1a4411a042b64d1b913581de7ca24863af" kindref="member">login</ref>);</highlight></codeline>
<codeline lineno="235"><highlight class="normal"><sp/><sp/><sp/><sp/>targetList-&gt;<ref refid="structHashTableUser_1ad8f2a7cd7e1a1267112675ebad4ec120" kindref="member">type</ref><sp/>=<sp/>strdup(users-&gt;<ref refid="structHashTableUser_1ad8f2a7cd7e1a1267112675ebad4ec120" kindref="member">type</ref>);</highlight></codeline>
<codeline lineno="236"><highlight class="normal"><sp/><sp/><sp/><sp/>targetList-&gt;<ref refid="structHashTableUser_1a31a2e2e93ce937b120ce5a0eb3a9fc0c" kindref="member">followers</ref><sp/>=<sp/>strdup(users-&gt;<ref refid="structHashTableUser_1a31a2e2e93ce937b120ce5a0eb3a9fc0c" kindref="member">followers</ref>);</highlight></codeline>
<codeline lineno="237"><highlight class="normal"><sp/><sp/><sp/><sp/>targetList-&gt;<ref refid="structHashTableUser_1a346618057e1a56491b7d5aa662481353" kindref="member">followers_list</ref><sp/>=<sp/>strdup(users-&gt;<ref refid="structHashTableUser_1a346618057e1a56491b7d5aa662481353" kindref="member">followers_list</ref>);</highlight></codeline>
<codeline lineno="238"><highlight class="normal"><sp/><sp/><sp/><sp/>targetList-&gt;<ref refid="structHashTableUser_1ac78d224baf010eab8208104ac2080591" kindref="member">following</ref><sp/>=<sp/>strdup(users-&gt;<ref refid="structHashTableUser_1ac78d224baf010eab8208104ac2080591" kindref="member">following</ref>);</highlight></codeline>
<codeline lineno="239"><highlight class="normal"><sp/><sp/><sp/><sp/>targetList-&gt;<ref refid="structHashTableUser_1aa6f42e4d3e8cbc4f3b92f68d54400707" kindref="member">following_list</ref><sp/>=<sp/>strdup(users-&gt;<ref refid="structHashTableUser_1aa6f42e4d3e8cbc4f3b92f68d54400707" kindref="member">following_list</ref>);</highlight></codeline>
<codeline lineno="240"><highlight class="normal"><sp/><sp/><sp/><sp/>targetList-&gt;<ref refid="structHashTableUser_1a6aed6b9ce8cc5c87f4fd4c6931b537a8" kindref="member">auxCount</ref><sp/>=<sp/>users-&gt;<ref refid="structHashTableUser_1a6aed6b9ce8cc5c87f4fd4c6931b537a8" kindref="member">auxCount</ref>;</highlight></codeline>
<codeline lineno="241"><highlight class="normal"><sp/><sp/><sp/><sp/>targetList-&gt;<ref refid="structHashTableUser_1a3c5f877d02e79f1c7f6e55c682a425db" kindref="member">next</ref><sp/>=<sp/><ref refid="HT__users_8c_1acbe8acfaf0364325683bf12562235574" kindref="member">listU</ref>(users-&gt;<ref refid="structHashTableUser_1a3c5f877d02e79f1c7f6e55c682a425db" kindref="member">next</ref>);</highlight></codeline>
<codeline lineno="242"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>targetList;</highlight></codeline>
<codeline lineno="243"><highlight class="normal">}</highlight></codeline>
<codeline lineno="244"><highlight class="normal"></highlight></codeline>
<codeline lineno="252"><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="HT__users_8c_1a2e23a36de5e89d02810a676d6a2f8a93" kindref="member">handle_UsersFile</ref>(FILE*<sp/>file,<sp/><ref refid="structHashTableUser" kindref="compound">HT_Users</ref><sp/>*users)</highlight></codeline>
<codeline lineno="253"><highlight class="normal">{</highlight></codeline>
<codeline lineno="254"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="HT__users_8c_1ac8b92e3deef2ea06588f9cc685cb3c13" kindref="member">init_HashTableUsers</ref>(users);</highlight></codeline>
<codeline lineno="255"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>c[524288];<sp/></highlight><highlight class="comment">//2^19</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="256"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*aux<sp/>=<sp/>NULL;</highlight></codeline>
<codeline lineno="257"><highlight class="normal"></highlight></codeline>
<codeline lineno="258"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal">(fgets(c,<sp/>524288,<sp/>file)<sp/>!=<sp/>NULL)</highlight></codeline>
<codeline lineno="259"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="260"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structHashTableUser" kindref="compound">HT_Users</ref><sp/>tmp<sp/>=<sp/>malloc(</highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(</highlight><highlight class="keyword">struct</highlight><highlight class="normal"><sp/><ref refid="structHashTableUser" kindref="compound">HashTableUser</ref>));</highlight></codeline>
<codeline lineno="261"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>flag<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="262"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*str<sp/>=<sp/>strdup<sp/>(c);</highlight></codeline>
<codeline lineno="263"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>aux<sp/>=<sp/>strsep(&amp;str,<sp/></highlight><highlight class="stringliteral">&quot;;\n\r&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="264"><highlight class="normal"></highlight></codeline>
<codeline lineno="265"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(aux!=NULL){</highlight></codeline>
<codeline lineno="266"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>flag<sp/>+=<sp/><ref refid="auxiliarFunc_8c_1ade2f80ae86b94cd7702049f847149e27" kindref="member">testInt</ref>(aux);</highlight></codeline>
<codeline lineno="267"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>tmp-&gt;<ref refid="structHashTableUser_1a6e6d25dda851a2881e407bd0adbefd04" kindref="member">id</ref><sp/>=<sp/>strdup(aux);</highlight></codeline>
<codeline lineno="268"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>aux<sp/>=<sp/>strsep(&amp;str,<sp/></highlight><highlight class="stringliteral">&quot;;\n\r&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="269"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>flag++;</highlight></codeline>
<codeline lineno="270"><highlight class="normal"></highlight></codeline>
<codeline lineno="271"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(aux!=NULL){</highlight></codeline>
<codeline lineno="272"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>flag<sp/>+=<sp/><ref refid="auxiliarFunc_8c_1a9b6cc458bbfc91f0c09dc65e56dddcc4" kindref="member">testString</ref>(aux);</highlight></codeline>
<codeline lineno="273"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>tmp-&gt;<ref refid="structHashTableUser_1a4411a042b64d1b913581de7ca24863af" kindref="member">login</ref><sp/>=<sp/>strdup(aux);</highlight></codeline>
<codeline lineno="274"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>aux<sp/>=<sp/>strsep(&amp;str,<sp/></highlight><highlight class="stringliteral">&quot;;\n\r&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="275"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>flag++;<sp/></highlight></codeline>
<codeline lineno="276"><highlight class="normal"></highlight></codeline>
<codeline lineno="277"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(aux!=NULL){</highlight></codeline>
<codeline lineno="278"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>flag<sp/>+=<sp/><ref refid="auxiliarFunc_8c_1a29311211c6cdccc1d3d7a4ce70ce3747" kindref="member">testType</ref>(aux);</highlight></codeline>
<codeline lineno="279"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>tmp-&gt;<ref refid="structHashTableUser_1ad8f2a7cd7e1a1267112675ebad4ec120" kindref="member">type</ref><sp/>=<sp/>strdup(aux);</highlight></codeline>
<codeline lineno="280"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>aux<sp/>=<sp/>strsep(&amp;str,<sp/></highlight><highlight class="stringliteral">&quot;;\n\r&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="281"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>flag++;</highlight></codeline>
<codeline lineno="282"><highlight class="normal"></highlight></codeline>
<codeline lineno="283"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(aux!=NULL){</highlight></codeline>
<codeline lineno="284"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>flag<sp/>+=<sp/><ref refid="auxiliarFunc_8c_1a85554b05d5d346698e1eeaa8ed79657c" kindref="member">isValidDate</ref>(aux);</highlight></codeline>
<codeline lineno="285"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>aux<sp/>=<sp/>strsep(&amp;str,<sp/></highlight><highlight class="stringliteral">&quot;;\n\r&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="286"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>flag++;</highlight></codeline>
<codeline lineno="287"><highlight class="normal"></highlight></codeline>
<codeline lineno="288"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(aux!=NULL){</highlight></codeline>
<codeline lineno="289"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>flag<sp/>+=<sp/><ref refid="auxiliarFunc_8c_1ade2f80ae86b94cd7702049f847149e27" kindref="member">testInt</ref>(aux);</highlight></codeline>
<codeline lineno="290"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>tmp-&gt;<ref refid="structHashTableUser_1a31a2e2e93ce937b120ce5a0eb3a9fc0c" kindref="member">followers</ref><sp/>=<sp/>strdup(aux);</highlight></codeline>
<codeline lineno="291"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>aux<sp/>=<sp/>strsep(&amp;str,<sp/></highlight><highlight class="stringliteral">&quot;;\n\r&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="292"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>flag++;</highlight></codeline>
<codeline lineno="293"><highlight class="normal"></highlight></codeline>
<codeline lineno="294"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(aux!=NULL){</highlight></codeline>
<codeline lineno="295"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>flag<sp/>+=<sp/><ref refid="auxiliarFunc_8c_1a402c8ec88de23240900c57e989ac67fa" kindref="member">testFollowersList</ref>(tmp-&gt;<ref refid="structHashTableUser_1a31a2e2e93ce937b120ce5a0eb3a9fc0c" kindref="member">followers</ref>,<sp/>aux);</highlight></codeline>
<codeline lineno="296"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>tmp-&gt;<ref refid="structHashTableUser_1a346618057e1a56491b7d5aa662481353" kindref="member">followers_list</ref><sp/>=<sp/>strdup(aux);</highlight></codeline>
<codeline lineno="297"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>aux<sp/>=<sp/>strsep(&amp;str,<sp/></highlight><highlight class="stringliteral">&quot;;\n\r&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="298"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>flag++;</highlight></codeline>
<codeline lineno="299"><highlight class="normal"></highlight></codeline>
<codeline lineno="300"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(aux!=NULL){</highlight></codeline>
<codeline lineno="301"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>flag<sp/>+=<sp/><ref refid="auxiliarFunc_8c_1ade2f80ae86b94cd7702049f847149e27" kindref="member">testInt</ref>(aux);</highlight></codeline>
<codeline lineno="302"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>tmp-&gt;<ref refid="structHashTableUser_1ac78d224baf010eab8208104ac2080591" kindref="member">following</ref><sp/>=<sp/>strdup(aux);</highlight></codeline>
<codeline lineno="303"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>aux<sp/>=<sp/>strsep(&amp;str,<sp/></highlight><highlight class="stringliteral">&quot;;\n\r&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="304"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>flag++;</highlight></codeline>
<codeline lineno="305"><highlight class="normal"></highlight></codeline>
<codeline lineno="306"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(aux!=NULL){</highlight></codeline>
<codeline lineno="307"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>flag<sp/>+=<sp/><ref refid="auxiliarFunc_8c_1ae91788c511212b6c4e1e8a7e7d496eee" kindref="member">testFollowingList</ref>(tmp-&gt;<ref refid="structHashTableUser_1ac78d224baf010eab8208104ac2080591" kindref="member">following</ref>,<sp/>aux);</highlight></codeline>
<codeline lineno="308"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>tmp-&gt;<ref refid="structHashTableUser_1aa6f42e4d3e8cbc4f3b92f68d54400707" kindref="member">following_list</ref><sp/>=<sp/>strdup(aux);</highlight></codeline>
<codeline lineno="309"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>aux<sp/>=<sp/>strsep(&amp;str,<sp/></highlight><highlight class="stringliteral">&quot;;\n\r&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="310"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>flag++;</highlight></codeline>
<codeline lineno="311"><highlight class="normal"></highlight></codeline>
<codeline lineno="312"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(aux!=NULL){</highlight></codeline>
<codeline lineno="313"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>flag<sp/>+=<sp/><ref refid="auxiliarFunc_8c_1ade2f80ae86b94cd7702049f847149e27" kindref="member">testInt</ref>(aux);</highlight></codeline>
<codeline lineno="314"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>aux<sp/>=<sp/>strsep(&amp;str,<sp/></highlight><highlight class="stringliteral">&quot;;\n\r&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="315"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>flag++;</highlight></codeline>
<codeline lineno="316"><highlight class="normal"></highlight></codeline>
<codeline lineno="317"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(aux!=NULL){</highlight></codeline>
<codeline lineno="318"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>flag<sp/>+=<sp/><ref refid="auxiliarFunc_8c_1ade2f80ae86b94cd7702049f847149e27" kindref="member">testInt</ref>(aux);</highlight></codeline>
<codeline lineno="319"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>aux<sp/>=<sp/>strsep(&amp;str,<sp/></highlight><highlight class="stringliteral">&quot;;\n\r&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="320"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>flag++;</highlight></codeline>
<codeline lineno="321"><highlight class="normal"></highlight></codeline>
<codeline lineno="322"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(flag<sp/>==<sp/>0)<sp/></highlight></codeline>
<codeline lineno="323"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="324"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>tmp-&gt;<ref refid="structHashTableUser_1a6aed6b9ce8cc5c87f4fd4c6931b537a8" kindref="member">auxCount</ref><sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="325"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="HT__users_8c_1a5ab32ec89aa833d35727ac4ed0f87bc3" kindref="member">insert_HashTableUsers</ref>(users,<sp/>tmp);</highlight></codeline>
<codeline lineno="326"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="327"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="328"><highlight class="normal">}</highlight></codeline>
<codeline lineno="329"><highlight class="normal"></highlight></codeline>
<codeline lineno="335"><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="HT__users_8c_1a6e4793c50a48dd2f74ee37515af9767e" kindref="member">resetUsersCounter</ref>(<ref refid="structHashTableUser" kindref="compound">HT_Users</ref><sp/>*hash)</highlight></codeline>
<codeline lineno="336"><highlight class="normal">{</highlight></codeline>
<codeline lineno="337"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/><ref refid="auxiliarFunc_8h_1a032503e76d6f69bc67e99e909c8125da" kindref="member">TABLE_SIZE</ref>;<sp/>i++)</highlight></codeline>
<codeline lineno="338"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="339"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="340"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structHashTableUser" kindref="compound">HT_Users</ref><sp/>aux<sp/>=<sp/>hash[i];</highlight></codeline>
<codeline lineno="341"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(aux<sp/>!=<sp/>NULL)</highlight></codeline>
<codeline lineno="342"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="343"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>aux-&gt;<ref refid="structHashTableUser_1a6aed6b9ce8cc5c87f4fd4c6931b537a8" kindref="member">auxCount</ref><sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="344"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>aux<sp/>=<sp/>aux-&gt;<ref refid="structHashTableUser_1a3c5f877d02e79f1c7f6e55c682a425db" kindref="member">next</ref>;</highlight></codeline>
<codeline lineno="345"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="346"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="347"><highlight class="normal">}</highlight></codeline>
<codeline lineno="348"><highlight class="normal"></highlight></codeline>
<codeline lineno="358"><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*<ref refid="HT__users_8c_1af8f08d0e64f91220a1370b545bc5177d" kindref="member">find_userFollowers</ref>(<ref refid="structHashTableUser" kindref="compound">HT_Users</ref><sp/>*users,<sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*</highlight><highlight class="keywordtype">id</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="359"><highlight class="normal">{</highlight></codeline>
<codeline lineno="360"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>key<sp/>=<sp/><ref refid="auxiliarFunc_8c_1a2dbcb08eb0c82000bf354bb3a0d66e95" kindref="member">hash_key</ref>(</highlight><highlight class="keywordtype">id</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="361"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structHashTableUser" kindref="compound">HT_Users</ref><sp/>aux<sp/>=<sp/>users[key];</highlight></codeline>
<codeline lineno="362"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(aux<sp/>!=<sp/>NULL<sp/>&amp;&amp;<sp/>strcmp(aux-&gt;<ref refid="structHashTableUser_1a6e6d25dda851a2881e407bd0adbefd04" kindref="member">id</ref>,<sp/></highlight><highlight class="keywordtype">id</highlight><highlight class="normal">)<sp/>!=<sp/>0)</highlight></codeline>
<codeline lineno="363"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>aux<sp/>=<sp/>aux-&gt;<ref refid="structHashTableUser_1a3c5f877d02e79f1c7f6e55c682a425db" kindref="member">next</ref>;</highlight></codeline>
<codeline lineno="364"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(aux!=NULL)</highlight></codeline>
<codeline lineno="365"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>strdup(aux-&gt;<ref refid="structHashTableUser_1a31a2e2e93ce937b120ce5a0eb3a9fc0c" kindref="member">followers</ref>);</highlight></codeline>
<codeline lineno="366"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>NULL;</highlight></codeline>
<codeline lineno="367"><highlight class="normal"></highlight></codeline>
<codeline lineno="368"><highlight class="normal">}</highlight></codeline>
<codeline lineno="369"><highlight class="normal"></highlight></codeline>
<codeline lineno="379"><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*<ref refid="HT__users_8c_1a066995ca50e5385cfb6376bf1b6ce055" kindref="member">find_userFollowing</ref>(<ref refid="structHashTableUser" kindref="compound">HT_Users</ref><sp/>*users,<sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*</highlight><highlight class="keywordtype">id</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="380"><highlight class="normal">{</highlight></codeline>
<codeline lineno="381"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>key<sp/>=<sp/><ref refid="auxiliarFunc_8c_1a2dbcb08eb0c82000bf354bb3a0d66e95" kindref="member">hash_key</ref>(</highlight><highlight class="keywordtype">id</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="382"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structHashTableUser" kindref="compound">HT_Users</ref><sp/>aux<sp/>=<sp/>users[key];</highlight></codeline>
<codeline lineno="383"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(aux<sp/>!=<sp/>NULL<sp/>&amp;&amp;<sp/>strcmp(aux-&gt;<ref refid="structHashTableUser_1a6e6d25dda851a2881e407bd0adbefd04" kindref="member">id</ref>,<sp/></highlight><highlight class="keywordtype">id</highlight><highlight class="normal">)<sp/>!=<sp/>0)</highlight></codeline>
<codeline lineno="384"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>aux<sp/>=<sp/>aux-&gt;<ref refid="structHashTableUser_1a3c5f877d02e79f1c7f6e55c682a425db" kindref="member">next</ref>;</highlight></codeline>
<codeline lineno="385"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(aux!=NULL)</highlight></codeline>
<codeline lineno="386"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>strdup(aux-&gt;<ref refid="structHashTableUser_1ac78d224baf010eab8208104ac2080591" kindref="member">following</ref>);</highlight></codeline>
<codeline lineno="387"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>NULL;</highlight></codeline>
<codeline lineno="388"><highlight class="normal">}</highlight></codeline>
<codeline lineno="389"><highlight class="normal"></highlight></codeline>
<codeline lineno="399"><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*<ref refid="HT__users_8c_1a36e191eaf5102e1b5806ca40df39354f" kindref="member">find_userFollowersList</ref>(<ref refid="structHashTableUser" kindref="compound">HT_Users</ref><sp/>*users,<sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*</highlight><highlight class="keywordtype">id</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="400"><highlight class="normal">{</highlight></codeline>
<codeline lineno="401"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>key<sp/>=<sp/><ref refid="auxiliarFunc_8c_1a2dbcb08eb0c82000bf354bb3a0d66e95" kindref="member">hash_key</ref>(</highlight><highlight class="keywordtype">id</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="402"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structHashTableUser" kindref="compound">HT_Users</ref><sp/>aux<sp/>=<sp/>users[key];</highlight></codeline>
<codeline lineno="403"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(aux<sp/>!=<sp/>NULL<sp/>&amp;&amp;<sp/>strcmp(aux-&gt;<ref refid="structHashTableUser_1a6e6d25dda851a2881e407bd0adbefd04" kindref="member">id</ref>,<sp/></highlight><highlight class="keywordtype">id</highlight><highlight class="normal">)<sp/>!=<sp/>0)</highlight></codeline>
<codeline lineno="404"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>aux<sp/>=<sp/>aux-&gt;<ref refid="structHashTableUser_1a3c5f877d02e79f1c7f6e55c682a425db" kindref="member">next</ref>;</highlight></codeline>
<codeline lineno="405"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(aux!=NULL)</highlight></codeline>
<codeline lineno="406"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>strdup(aux-&gt;<ref refid="structHashTableUser_1a346618057e1a56491b7d5aa662481353" kindref="member">followers_list</ref>);</highlight></codeline>
<codeline lineno="407"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>NULL;</highlight></codeline>
<codeline lineno="408"><highlight class="normal">}</highlight></codeline>
<codeline lineno="409"><highlight class="normal"></highlight></codeline>
<codeline lineno="419"><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*<ref refid="HT__users_8c_1a772853896c4c8006e50e73f9a6c527f1" kindref="member">find_userFollowingList</ref>(<ref refid="structHashTableUser" kindref="compound">HT_Users</ref><sp/>*users,<sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*</highlight><highlight class="keywordtype">id</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="420"><highlight class="normal">{</highlight></codeline>
<codeline lineno="421"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>key<sp/>=<sp/><ref refid="auxiliarFunc_8c_1a2dbcb08eb0c82000bf354bb3a0d66e95" kindref="member">hash_key</ref>(</highlight><highlight class="keywordtype">id</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="422"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structHashTableUser" kindref="compound">HT_Users</ref><sp/>aux<sp/>=<sp/>users[key];</highlight></codeline>
<codeline lineno="423"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(aux<sp/>!=<sp/>NULL<sp/>&amp;&amp;<sp/>strcmp(aux-&gt;<ref refid="structHashTableUser_1a6e6d25dda851a2881e407bd0adbefd04" kindref="member">id</ref>,<sp/></highlight><highlight class="keywordtype">id</highlight><highlight class="normal">)<sp/>!=<sp/>0)</highlight></codeline>
<codeline lineno="424"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>aux<sp/>=<sp/>aux-&gt;<ref refid="structHashTableUser_1a3c5f877d02e79f1c7f6e55c682a425db" kindref="member">next</ref>;</highlight></codeline>
<codeline lineno="425"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(aux!=NULL)</highlight></codeline>
<codeline lineno="426"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>strdup(aux-&gt;<ref refid="structHashTableUser_1aa6f42e4d3e8cbc4f3b92f68d54400707" kindref="member">following_list</ref>);</highlight></codeline>
<codeline lineno="427"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>NULL;</highlight></codeline>
<codeline lineno="428"><highlight class="normal">}</highlight></codeline>
<codeline lineno="429"><highlight class="normal"></highlight></codeline>
<codeline lineno="439"><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*<ref refid="HT__users_8c_1a1720390cad03b26a5eca8b17b4274f60" kindref="member">find_userLogin</ref>(<ref refid="structHashTableUser" kindref="compound">HT_Users</ref><sp/>*users,<sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*</highlight><highlight class="keywordtype">id</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="440"><highlight class="normal">{</highlight></codeline>
<codeline lineno="441"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>key<sp/>=<sp/><ref refid="auxiliarFunc_8c_1a2dbcb08eb0c82000bf354bb3a0d66e95" kindref="member">hash_key</ref>(</highlight><highlight class="keywordtype">id</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="442"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structHashTableUser" kindref="compound">HT_Users</ref><sp/>aux<sp/>=<sp/>users[key];</highlight></codeline>
<codeline lineno="443"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(aux<sp/>!=<sp/>NULL<sp/>&amp;&amp;<sp/>strcmp(aux-&gt;<ref refid="structHashTableUser_1a6e6d25dda851a2881e407bd0adbefd04" kindref="member">id</ref>,<sp/></highlight><highlight class="keywordtype">id</highlight><highlight class="normal">)<sp/>!=<sp/>0)</highlight></codeline>
<codeline lineno="444"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>aux<sp/>=<sp/>aux-&gt;<ref refid="structHashTableUser_1a3c5f877d02e79f1c7f6e55c682a425db" kindref="member">next</ref>;</highlight></codeline>
<codeline lineno="445"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(aux!=NULL)</highlight></codeline>
<codeline lineno="446"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>strdup(aux-&gt;<ref refid="structHashTableUser_1a4411a042b64d1b913581de7ca24863af" kindref="member">login</ref>);</highlight></codeline>
<codeline lineno="447"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>NULL;</highlight></codeline>
<codeline lineno="448"><highlight class="normal">}</highlight></codeline>
<codeline lineno="449"><highlight class="normal"></highlight></codeline>
<codeline lineno="457"><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="HT__users_8c_1ab88e91ff6dd53dc80de2e45b846cf5b3" kindref="member">countTypeBots</ref>(<ref refid="structHashTableUser" kindref="compound">HT_Users</ref><sp/>*users)</highlight></codeline>
<codeline lineno="458"><highlight class="normal">{</highlight></codeline>
<codeline lineno="459"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>counter<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="460"><highlight class="normal"></highlight></codeline>
<codeline lineno="461"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i=0;<sp/>i<sp/>&lt;<sp/><ref refid="auxiliarFunc_8h_1a032503e76d6f69bc67e99e909c8125da" kindref="member">TABLE_SIZE</ref>;<sp/>i++)</highlight></codeline>
<codeline lineno="462"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="463"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structHashTableUser" kindref="compound">HT_Users</ref><sp/>aux<sp/>=<sp/>users[i];</highlight></codeline>
<codeline lineno="464"><highlight class="normal"></highlight></codeline>
<codeline lineno="465"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal">(aux<sp/>!=<sp/>NULL)</highlight></codeline>
<codeline lineno="466"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="467"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*<ref refid="structHashTableUser_1ad8f2a7cd7e1a1267112675ebad4ec120" kindref="member">type</ref><sp/>=<sp/>aux-&gt;<ref refid="structHashTableUser_1ad8f2a7cd7e1a1267112675ebad4ec120" kindref="member">type</ref>;</highlight></codeline>
<codeline lineno="468"><highlight class="normal"></highlight></codeline>
<codeline lineno="469"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(strcmp(</highlight><highlight class="stringliteral">&quot;Bot&quot;</highlight><highlight class="normal">,<ref refid="structHashTableUser_1ad8f2a7cd7e1a1267112675ebad4ec120" kindref="member">type</ref>)==0)<sp/>counter++;</highlight></codeline>
<codeline lineno="470"><highlight class="normal"></highlight></codeline>
<codeline lineno="471"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>aux<sp/>=<sp/>aux-&gt;<ref refid="structHashTableUser_1a3c5f877d02e79f1c7f6e55c682a425db" kindref="member">next</ref>;</highlight></codeline>
<codeline lineno="472"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="473"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="474"><highlight class="normal"></highlight></codeline>
<codeline lineno="475"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>counter;</highlight></codeline>
<codeline lineno="476"><highlight class="normal">}</highlight></codeline>
<codeline lineno="477"><highlight class="normal"></highlight></codeline>
<codeline lineno="485"><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="HT__users_8c_1a28496df300b04743b54c869ec53474ca" kindref="member">countTypeOrganizations</ref>(<ref refid="structHashTableUser" kindref="compound">HT_Users</ref><sp/>*users)</highlight></codeline>
<codeline lineno="486"><highlight class="normal">{</highlight></codeline>
<codeline lineno="487"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>counter<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="488"><highlight class="normal"></highlight></codeline>
<codeline lineno="489"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i=0;<sp/>i<sp/>&lt;<sp/><ref refid="auxiliarFunc_8h_1a032503e76d6f69bc67e99e909c8125da" kindref="member">TABLE_SIZE</ref>;<sp/>i++)</highlight></codeline>
<codeline lineno="490"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="491"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structHashTableUser" kindref="compound">HT_Users</ref><sp/>aux<sp/>=<sp/>users[i];</highlight></codeline>
<codeline lineno="492"><highlight class="normal"></highlight></codeline>
<codeline lineno="493"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal">(aux<sp/>!=<sp/>NULL)</highlight></codeline>
<codeline lineno="494"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="495"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*<ref refid="structHashTableUser_1ad8f2a7cd7e1a1267112675ebad4ec120" kindref="member">type</ref><sp/>=<sp/>aux-&gt;<ref refid="structHashTableUser_1ad8f2a7cd7e1a1267112675ebad4ec120" kindref="member">type</ref>;</highlight></codeline>
<codeline lineno="496"><highlight class="normal"></highlight></codeline>
<codeline lineno="497"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(strcmp(</highlight><highlight class="stringliteral">&quot;Organization&quot;</highlight><highlight class="normal">,<ref refid="structHashTableUser_1ad8f2a7cd7e1a1267112675ebad4ec120" kindref="member">type</ref>)==0)<sp/>counter++;</highlight></codeline>
<codeline lineno="498"><highlight class="normal"></highlight></codeline>
<codeline lineno="499"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>aux<sp/>=<sp/>aux-&gt;<ref refid="structHashTableUser_1a3c5f877d02e79f1c7f6e55c682a425db" kindref="member">next</ref>;</highlight></codeline>
<codeline lineno="500"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="501"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="502"><highlight class="normal"></highlight></codeline>
<codeline lineno="503"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>counter;</highlight></codeline>
<codeline lineno="504"><highlight class="normal">}</highlight></codeline>
<codeline lineno="505"><highlight class="normal"></highlight></codeline>
<codeline lineno="513"><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="HT__users_8c_1a65e9b28917c7bb36f47ddbdea16a0886" kindref="member">countTypeUsers</ref>(<ref refid="structHashTableUser" kindref="compound">HT_Users</ref><sp/>*users)</highlight></codeline>
<codeline lineno="514"><highlight class="normal">{</highlight></codeline>
<codeline lineno="515"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>counter<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="516"><highlight class="normal"></highlight></codeline>
<codeline lineno="517"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i=0;<sp/>i<sp/>&lt;<sp/><ref refid="auxiliarFunc_8h_1a032503e76d6f69bc67e99e909c8125da" kindref="member">TABLE_SIZE</ref>;<sp/>i++)</highlight></codeline>
<codeline lineno="518"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="519"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structHashTableUser" kindref="compound">HT_Users</ref><sp/>aux<sp/>=<sp/>users[i];</highlight></codeline>
<codeline lineno="520"><highlight class="normal"></highlight></codeline>
<codeline lineno="521"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal">(aux<sp/>!=<sp/>NULL)</highlight></codeline>
<codeline lineno="522"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="523"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*<ref refid="structHashTableUser_1ad8f2a7cd7e1a1267112675ebad4ec120" kindref="member">type</ref><sp/>=<sp/>aux-&gt;<ref refid="structHashTableUser_1ad8f2a7cd7e1a1267112675ebad4ec120" kindref="member">type</ref>;</highlight></codeline>
<codeline lineno="524"><highlight class="normal"></highlight></codeline>
<codeline lineno="525"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(strcmp(</highlight><highlight class="stringliteral">&quot;User&quot;</highlight><highlight class="normal">,<ref refid="structHashTableUser_1ad8f2a7cd7e1a1267112675ebad4ec120" kindref="member">type</ref>)==0)<sp/>counter++;</highlight></codeline>
<codeline lineno="526"><highlight class="normal"></highlight></codeline>
<codeline lineno="527"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>aux<sp/>=<sp/>aux-&gt;<ref refid="structHashTableUser_1a3c5f877d02e79f1c7f6e55c682a425db" kindref="member">next</ref>;</highlight></codeline>
<codeline lineno="528"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="529"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="530"><highlight class="normal"></highlight></codeline>
<codeline lineno="531"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>counter;</highlight></codeline>
<codeline lineno="532"><highlight class="normal">}</highlight></codeline>
<codeline lineno="533"><highlight class="normal"></highlight></codeline>
<codeline lineno="543"><highlight class="normal"><ref refid="structtree" kindref="compound">TREE</ref><sp/><ref refid="HT__users_8c_1addbc4933953789669785fce58babbf77" kindref="member">countBotsTree</ref>(<ref refid="structHashTableUser" kindref="compound">HT_Users</ref><sp/>*users,<sp/><ref refid="structtree" kindref="compound">TREE</ref><sp/>bots)</highlight></codeline>
<codeline lineno="544"><highlight class="normal">{</highlight></codeline>
<codeline lineno="545"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i=0;<sp/>i<sp/>&lt;<sp/><ref refid="auxiliarFunc_8h_1a032503e76d6f69bc67e99e909c8125da" kindref="member">TABLE_SIZE</ref>;<sp/>i++)</highlight></codeline>
<codeline lineno="546"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="547"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structHashTableUser" kindref="compound">HT_Users</ref><sp/>aux<sp/>=<sp/>users[i];</highlight></codeline>
<codeline lineno="548"><highlight class="normal"></highlight></codeline>
<codeline lineno="549"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(aux<sp/>!=<sp/>NULL)</highlight></codeline>
<codeline lineno="550"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="551"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*<ref refid="structHashTableUser_1ad8f2a7cd7e1a1267112675ebad4ec120" kindref="member">type</ref><sp/>=<sp/>aux-&gt;<ref refid="structHashTableUser_1ad8f2a7cd7e1a1267112675ebad4ec120" kindref="member">type</ref>;</highlight></codeline>
<codeline lineno="552"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*idUser<sp/>=<sp/>aux-&gt;<ref refid="structHashTableUser_1a6e6d25dda851a2881e407bd0adbefd04" kindref="member">id</ref>;</highlight></codeline>
<codeline lineno="553"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">id</highlight><highlight class="normal"><sp/>=<sp/>atoi(idUser);</highlight></codeline>
<codeline lineno="554"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(strcmp(<ref refid="structHashTableUser_1ad8f2a7cd7e1a1267112675ebad4ec120" kindref="member">type</ref>,<sp/></highlight><highlight class="stringliteral">&quot;Bot&quot;</highlight><highlight class="normal">)<sp/>==<sp/>0)</highlight></codeline>
<codeline lineno="555"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="556"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>bots<sp/>=<sp/><ref refid="auxiliarTree_8c_1a046d3ee75787615cc6a9cc1bca11521f" kindref="member">insert</ref>(bots,<sp/></highlight><highlight class="keywordtype">id</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="557"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="558"><highlight class="normal"></highlight></codeline>
<codeline lineno="559"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//free(type);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="560"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//free(idUser);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="561"><highlight class="normal"></highlight></codeline>
<codeline lineno="562"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>aux<sp/>=<sp/>aux-&gt;<ref refid="structHashTableUser_1a3c5f877d02e79f1c7f6e55c682a425db" kindref="member">next</ref>;</highlight></codeline>
<codeline lineno="563"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="564"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="565"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="566"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>bots;</highlight></codeline>
<codeline lineno="567"><highlight class="normal">}</highlight></codeline>
<codeline lineno="568"><highlight class="normal"></highlight></codeline>
<codeline lineno="580"><highlight class="normal"><ref refid="structtree" kindref="compound">TREE</ref><sp/><ref refid="HT__users_8c_1a1e74c9c89c0359ab5b9f7342c48a6226" kindref="member">friendsTree</ref>(<ref refid="structHashTableUser" kindref="compound">HT_Users</ref><sp/>*users,<sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*</highlight><highlight class="keywordtype">id</highlight><highlight class="normal">,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>*k)</highlight></codeline>
<codeline lineno="581"><highlight class="normal">{</highlight></codeline>
<codeline lineno="582"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*followersList<sp/>=<sp/><ref refid="HT__users_8c_1af8f08d0e64f91220a1370b545bc5177d" kindref="member">find_userFollowers</ref>(users,<sp/></highlight><highlight class="keywordtype">id</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="583"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="structHashTableUser_1a31a2e2e93ce937b120ce5a0eb3a9fc0c" kindref="member">followers</ref><sp/>=<sp/>atoi(followersList);</highlight></codeline>
<codeline lineno="584"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*followingList<sp/>=<sp/><ref refid="HT__users_8c_1a066995ca50e5385cfb6376bf1b6ce055" kindref="member">find_userFollowing</ref>(users,<sp/></highlight><highlight class="keywordtype">id</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="585"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="structHashTableUser_1ac78d224baf010eab8208104ac2080591" kindref="member">following</ref><sp/>=<sp/>atoi(followingList);</highlight></codeline>
<codeline lineno="586"><highlight class="normal"></highlight></codeline>
<codeline lineno="587"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structtree" kindref="compound">TREE</ref><sp/>followersTree<sp/>=<sp/>NULL;</highlight></codeline>
<codeline lineno="588"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structtree" kindref="compound">TREE</ref><sp/><ref refid="HT__users_8c_1a1e74c9c89c0359ab5b9f7342c48a6226" kindref="member">friendsTree</ref><sp/>=<sp/>NULL;</highlight></codeline>
<codeline lineno="589"><highlight class="normal"></highlight></codeline>
<codeline lineno="590"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(<ref refid="structHashTableUser_1a31a2e2e93ce937b120ce5a0eb3a9fc0c" kindref="member">followers</ref><sp/>==<sp/>0<sp/>||<sp/><ref refid="structHashTableUser_1ac78d224baf010eab8208104ac2080591" kindref="member">following</ref><sp/>==<sp/>0)<sp/>(*k)<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="591"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="592"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//followersTree<sp/>=<sp/>NULL;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="593"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i;</highlight></codeline>
<codeline lineno="594"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*aux<sp/>=<sp/><ref refid="HT__users_8c_1a36e191eaf5102e1b5806ca40df39354f" kindref="member">find_userFollowersList</ref>(users,<sp/></highlight><highlight class="keywordtype">id</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="595"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*followersList<sp/>=<sp/>aux<sp/>+<sp/>1;</highlight></codeline>
<codeline lineno="596"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/><ref refid="structHashTableUser_1a31a2e2e93ce937b120ce5a0eb3a9fc0c" kindref="member">followers</ref>;<sp/>i++)<sp/>{</highlight></codeline>
<codeline lineno="597"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*aux2<sp/>=<sp/>strsep(&amp;followersList,<sp/></highlight><highlight class="stringliteral">&quot;,]\n&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="598"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>l<sp/>=<sp/>atoi(aux2);</highlight></codeline>
<codeline lineno="599"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>followersTree<sp/>=<sp/><ref refid="auxiliarTree_8c_1a046d3ee75787615cc6a9cc1bca11521f" kindref="member">insert</ref>(followersTree,l);</highlight></codeline>
<codeline lineno="600"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="601"><highlight class="normal"></highlight></codeline>
<codeline lineno="602"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//friendsTree<sp/>=<sp/>NULL;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="603"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*k<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="604"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*aux3<sp/>=<sp/><ref refid="HT__users_8c_1a772853896c4c8006e50e73f9a6c527f1" kindref="member">find_userFollowingList</ref>(users,<sp/></highlight><highlight class="keywordtype">id</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="605"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*followingList<sp/>=<sp/>aux3<sp/>+<sp/>1;</highlight></codeline>
<codeline lineno="606"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/><ref refid="structHashTableUser_1ac78d224baf010eab8208104ac2080591" kindref="member">following</ref>;<sp/>i++)<sp/>{</highlight></codeline>
<codeline lineno="607"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*aux4<sp/>=<sp/>strsep(&amp;followingList,<sp/></highlight><highlight class="stringliteral">&quot;,]\n&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="608"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>t<sp/>=<sp/>atoi(aux4);</highlight></codeline>
<codeline lineno="609"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>flag<sp/>=<sp/><ref refid="auxiliarTree_8c_1aeb08a84830917a5d5d0f343cff03f335" kindref="member">search</ref>(followersTree,t);</highlight></codeline>
<codeline lineno="610"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(flag<sp/>==<sp/>1)<sp/>{</highlight></codeline>
<codeline lineno="611"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="HT__users_8c_1a1e74c9c89c0359ab5b9f7342c48a6226" kindref="member">friendsTree</ref><sp/>=<sp/><ref refid="auxiliarTree_8c_1a046d3ee75787615cc6a9cc1bca11521f" kindref="member">insert</ref>(<ref refid="HT__users_8c_1a1e74c9c89c0359ab5b9f7342c48a6226" kindref="member">friendsTree</ref>,t);</highlight></codeline>
<codeline lineno="612"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(*k)++;</highlight></codeline>
<codeline lineno="613"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="614"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="615"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="616"><highlight class="normal"></highlight></codeline>
<codeline lineno="617"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="HT__users_8c_1a1e74c9c89c0359ab5b9f7342c48a6226" kindref="member">friendsTree</ref>;</highlight></codeline>
<codeline lineno="618"><highlight class="normal">}</highlight></codeline>
<codeline lineno="619"><highlight class="normal"></highlight></codeline>
<codeline lineno="627"><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/><ref refid="HT__users_8c_1ae71e01f34dda9f4ed92fefab919d8a94" kindref="member">countUsers</ref>(<ref refid="structHashTableUser" kindref="compound">HT_Users</ref><sp/>*users)</highlight></codeline>
<codeline lineno="628"><highlight class="normal">{</highlight></codeline>
<codeline lineno="629"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>counter<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="630"><highlight class="normal"></highlight></codeline>
<codeline lineno="631"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i=0;<sp/>i<sp/>&lt;<sp/><ref refid="auxiliarFunc_8h_1a032503e76d6f69bc67e99e909c8125da" kindref="member">TABLE_SIZE</ref>;<sp/>i++)</highlight></codeline>
<codeline lineno="632"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="633"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structHashTableUser" kindref="compound">HT_Users</ref><sp/>aux<sp/>=<sp/>users[i];</highlight></codeline>
<codeline lineno="634"><highlight class="normal"></highlight></codeline>
<codeline lineno="635"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal">(aux<sp/>!=<sp/>NULL)</highlight></codeline>
<codeline lineno="636"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="637"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>counter++;</highlight></codeline>
<codeline lineno="638"><highlight class="normal"></highlight></codeline>
<codeline lineno="639"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>aux<sp/>=<sp/>aux-&gt;<ref refid="structHashTableUser_1a3c5f877d02e79f1c7f6e55c682a425db" kindref="member">next</ref>;</highlight></codeline>
<codeline lineno="640"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="641"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="642"><highlight class="normal"></highlight></codeline>
<codeline lineno="643"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>counter;</highlight></codeline>
<codeline lineno="644"><highlight class="normal">}</highlight></codeline>
<codeline lineno="645"><highlight class="normal"></highlight></codeline>
<codeline lineno="657"><highlight class="normal"><ref refid="structtopUsersStruct" kindref="compound">TOPUSERSSTRUCT</ref><sp/><ref refid="HT__users_8c_1a656661bacae8cb37ac77d0b847cf80aa" kindref="member">activeUsers</ref>(<ref refid="structHashTableUser" kindref="compound">HT_Users</ref><sp/>*users,<sp/><ref refid="structtopUsersStruct" kindref="compound">TOPUSERSSTRUCT</ref><sp/>topUsers,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>N)</highlight></codeline>
<codeline lineno="658"><highlight class="normal">{</highlight></codeline>
<codeline lineno="659"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i=0;<sp/>i<sp/>&lt;<sp/><ref refid="auxiliarFunc_8h_1a032503e76d6f69bc67e99e909c8125da" kindref="member">TABLE_SIZE</ref>;<sp/>i++)</highlight></codeline>
<codeline lineno="660"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="661"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structHashTableUser" kindref="compound">HT_Users</ref><sp/>aux<sp/>=<sp/>users[i];</highlight></codeline>
<codeline lineno="662"><highlight class="normal"></highlight></codeline>
<codeline lineno="663"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>flag<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="664"><highlight class="normal"></highlight></codeline>
<codeline lineno="665"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal">(aux<sp/>!=<sp/>NULL)</highlight></codeline>
<codeline lineno="666"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="667"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>count<sp/>=<sp/>aux-&gt;<ref refid="structHashTableUser_1a6aed6b9ce8cc5c87f4fd4c6931b537a8" kindref="member">auxCount</ref>;</highlight></codeline>
<codeline lineno="668"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>k<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="669"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>N;<sp/>i++)<sp/></highlight></codeline>
<codeline lineno="670"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="671"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>c1<sp/>=<sp/><ref refid="auxiliarStruct_8c_1ae0d64feea4fd024f4a4fa98b09e3eaf5" kindref="member">obtain_TopUsersCount</ref><sp/>(topUsers,<sp/>i);</highlight></codeline>
<codeline lineno="672"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(count<sp/>&lt;<sp/>c1)<sp/>k++;</highlight></codeline>
<codeline lineno="673"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="674"><highlight class="normal"></highlight></codeline>
<codeline lineno="675"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(k&lt;N)<sp/></highlight></codeline>
<codeline lineno="676"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{<sp/></highlight></codeline>
<codeline lineno="677"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>j<sp/>=<sp/>0;<sp/>flag-j<sp/>&gt;<sp/>k;<sp/>j++)<sp/></highlight></codeline>
<codeline lineno="678"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="679"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>f<sp/>=<sp/>flag-j;</highlight></codeline>
<codeline lineno="680"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="auxiliarStruct_8c_1a38f54fcc1b7618e11718254852b58be3" kindref="member">topUsersSort</ref><sp/>(topUsers,f);</highlight></codeline>
<codeline lineno="681"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="682"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="683"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*a<sp/>=<sp/>aux-&gt;<ref refid="structHashTableUser_1a6e6d25dda851a2881e407bd0adbefd04" kindref="member">id</ref>;</highlight></codeline>
<codeline lineno="684"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*b<sp/>=<sp/>aux-&gt;<ref refid="structHashTableUser_1a4411a042b64d1b913581de7ca24863af" kindref="member">login</ref>;</highlight></codeline>
<codeline lineno="685"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="auxiliarStruct_8c_1ac51017054b64d0038d0bacb675564f58" kindref="member">topUsersSave</ref><sp/>(topUsers,<sp/>k,<sp/>a,<sp/>b,<sp/>count);</highlight></codeline>
<codeline lineno="686"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>flag++;</highlight></codeline>
<codeline lineno="687"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="688"><highlight class="normal"></highlight></codeline>
<codeline lineno="689"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>aux<sp/>=<sp/>aux-&gt;<ref refid="structHashTableUser_1a3c5f877d02e79f1c7f6e55c682a425db" kindref="member">next</ref>;</highlight></codeline>
<codeline lineno="690"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="691"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="692"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="693"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>topUsers;</highlight></codeline>
<codeline lineno="694"><highlight class="normal">}</highlight></codeline>
<codeline lineno="695"><highlight class="normal"></highlight></codeline>
<codeline lineno="701"><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="HT__users_8c_1ac445186d64c181b493fed1ef07832abf" kindref="member">free_TableUsers</ref>(<ref refid="structHashTableUser" kindref="compound">HT_Users</ref><sp/>*users)</highlight></codeline>
<codeline lineno="702"><highlight class="normal">{</highlight></codeline>
<codeline lineno="703"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i=0;<sp/>i<sp/>&lt;<sp/><ref refid="auxiliarFunc_8h_1a032503e76d6f69bc67e99e909c8125da" kindref="member">TABLE_SIZE</ref>;<sp/>i++)</highlight></codeline>
<codeline lineno="704"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="705"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structHashTableUser" kindref="compound">HT_Users</ref><sp/>aux<sp/>=<sp/>users[i];</highlight></codeline>
<codeline lineno="706"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structHashTableUser" kindref="compound">HT_Users</ref><sp/>prev<sp/>=<sp/>NULL;</highlight></codeline>
<codeline lineno="707"><highlight class="normal"></highlight></codeline>
<codeline lineno="708"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal">(aux!=NULL)</highlight></codeline>
<codeline lineno="709"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="710"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>prev<sp/>=<sp/>aux;</highlight></codeline>
<codeline lineno="711"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>free(aux-&gt;<ref refid="structHashTableUser_1a6e6d25dda851a2881e407bd0adbefd04" kindref="member">id</ref>);</highlight></codeline>
<codeline lineno="712"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>free(aux-&gt;<ref refid="structHashTableUser_1a4411a042b64d1b913581de7ca24863af" kindref="member">login</ref>);</highlight></codeline>
<codeline lineno="713"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>free(aux-&gt;<ref refid="structHashTableUser_1ad8f2a7cd7e1a1267112675ebad4ec120" kindref="member">type</ref>);</highlight></codeline>
<codeline lineno="714"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>free(aux-&gt;<ref refid="structHashTableUser_1a31a2e2e93ce937b120ce5a0eb3a9fc0c" kindref="member">followers</ref>);</highlight></codeline>
<codeline lineno="715"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>free(aux-&gt;<ref refid="structHashTableUser_1a346618057e1a56491b7d5aa662481353" kindref="member">followers_list</ref>);</highlight></codeline>
<codeline lineno="716"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>free(aux-&gt;<ref refid="structHashTableUser_1ac78d224baf010eab8208104ac2080591" kindref="member">following</ref>);</highlight></codeline>
<codeline lineno="717"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>free(aux-&gt;<ref refid="structHashTableUser_1aa6f42e4d3e8cbc4f3b92f68d54400707" kindref="member">following_list</ref>);</highlight></codeline>
<codeline lineno="718"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>free(prev);</highlight></codeline>
<codeline lineno="719"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>aux<sp/>=<sp/>aux-&gt;<ref refid="structHashTableUser_1a3c5f877d02e79f1c7f6e55c682a425db" kindref="member">next</ref>;</highlight></codeline>
<codeline lineno="720"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="721"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="722"><highlight class="normal">}</highlight></codeline>
    </programlisting>
    <location file="HT_users.c"/>
  </compounddef>
</doxygen>
