<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.2" xml:lang="en-US">
  <compounddef id="data__tree_8c" kind="file" language="C++">
    <compoundname>data_tree.c</compoundname>
    <includes refid="data__tree_8h" local="yes">data_tree.h</includes>
    <incdepgraph>
      <node id="8">
        <label>data_commits.h</label>
        <link refid="data__commits_8h"/>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="4" relation="include">
        </childnode>
        <childnode refid="5" relation="include">
        </childnode>
        <childnode refid="6" relation="include">
        </childnode>
      </node>
      <node id="9">
        <label>data_repos.h</label>
        <link refid="data__repos_8h"/>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="4" relation="include">
        </childnode>
        <childnode refid="5" relation="include">
        </childnode>
        <childnode refid="6" relation="include">
        </childnode>
      </node>
      <node id="1">
        <label>data_tree.c</label>
        <link refid="data__tree_8c"/>
        <childnode refid="2" relation="include">
        </childnode>
      </node>
      <node id="2">
        <label>data_tree.h</label>
        <link refid="data__tree_8h"/>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="4" relation="include">
        </childnode>
        <childnode refid="5" relation="include">
        </childnode>
        <childnode refid="6" relation="include">
        </childnode>
        <childnode refid="7" relation="include">
        </childnode>
        <childnode refid="8" relation="include">
        </childnode>
        <childnode refid="9" relation="include">
        </childnode>
      </node>
      <node id="7">
        <label>data_users.h</label>
        <link refid="data__users_8h"/>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="4" relation="include">
        </childnode>
        <childnode refid="5" relation="include">
        </childnode>
        <childnode refid="6" relation="include">
        </childnode>
      </node>
      <node id="6">
        <label>math.h</label>
      </node>
      <node id="3">
        <label>stdio.h</label>
      </node>
      <node id="4">
        <label>stdlib.h</label>
      </node>
      <node id="5">
        <label>string.h</label>
      </node>
    </incdepgraph>
    <innerclass refid="structtree" prot="public">tree</innerclass>
    <innerclass refid="structtreeUsers" prot="public">treeUsers</innerclass>
    <innerclass refid="structtreeUsers9" prot="public">treeUsers9</innerclass>
    <innerclass refid="structtreeRepos" prot="public">treeRepos</innerclass>
      <sectiondef kind="func">
      <memberdef kind="function" id="data__tree_8c_1a046d3ee75787615cc6a9cc1bca11521f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="data__tree_8h_1ac0e4efc186caf2b97b1366033992c135" kindref="member">TREE</ref></type>
        <definition>TREE insert</definition>
        <argsstring>(TREE tree, int x)</argsstring>
        <name>insert</name>
        <param>
          <type><ref refid="data__tree_8h_1ac0e4efc186caf2b97b1366033992c135" kindref="member">TREE</ref></type>
          <declname>tree</declname>
        </param>
        <param>
          <type>int</type>
          <declname>x</declname>
        </param>
        <briefdescription>
<para>Função que insere os elementos na árvore binária. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>tree</parametername>
</parameternamelist>
<parameterdescription>
<para>Árvore binária onde se irá guardar o elemento.</para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>x</parametername>
</parameternamelist>
<parameterdescription>
<para>Elemento a guardar na árvore binária.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Retorna a árvore com o elemento inserido. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="data_tree.c" line="65" column="6" bodyfile="data_tree.c" bodystart="65" bodyend="80"/>
      </memberdef>
      <memberdef kind="function" id="data__tree_8c_1a8d3d97f663d3b4a863d0fc67497451e8" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="data__tree_8h_1ac0e4efc186caf2b97b1366033992c135" kindref="member">TREE</ref></type>
        <definition>TREE filterRepos_Lang</definition>
        <argsstring>(char *lang, REPOS repos, TREE tree)</argsstring>
        <name>filterRepos_Lang</name>
        <param>
          <type>char *</type>
          <declname>lang</declname>
        </param>
        <param>
          <type><ref refid="data__repos_8h_1ae323904139d1862c9eae86924398028d" kindref="member">REPOS</ref></type>
          <declname>repos</declname>
        </param>
        <param>
          <type><ref refid="data__tree_8h_1ac0e4efc186caf2b97b1366033992c135" kindref="member">TREE</ref></type>
          <declname>tree</declname>
        </param>
        <briefdescription>
<para>Função que filtra os repositórios com a linguagem especificada. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>lang</parametername>
</parameternamelist>
<parameterdescription>
<para>Linguagem de programação a procurar nos repositórios.</para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>repos</parametername>
</parameternamelist>
<parameterdescription>
<para>Catálogo de Repositórios.</para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>tree</parametername>
</parameternamelist>
<parameterdescription>
<para>Árvore a inserir os ID&apos;s dos repositórios com a linguagem especificada.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Árvore dos ID&apos;s dos repositórios com a linguagem especificada. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="data_tree.c" line="93" column="6" bodyfile="data_tree.c" bodystart="93" bodyend="112"/>
      </memberdef>
      <memberdef kind="function" id="data__tree_8c_1a4497f147976f474d12058b0ce4f74417" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="data__tree_8h_1a519b47b366ce8ed237efaf19c7cc1e4d" kindref="member">TREEUSERS</ref></type>
        <definition>TREEUSERS addUsersTREE</definition>
        <argsstring>(TREEUSERS tree, char *id, char *login)</argsstring>
        <name>addUsersTREE</name>
        <param>
          <type><ref refid="data__tree_8h_1a519b47b366ce8ed237efaf19c7cc1e4d" kindref="member">TREEUSERS</ref></type>
          <declname>tree</declname>
        </param>
        <param>
          <type>char *</type>
          <declname>id</declname>
        </param>
        <param>
          <type>char *</type>
          <declname>login</declname>
        </param>
        <briefdescription>
<para>Função que adiciona nodos a uma árvore de users. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>tree</parametername>
</parameternamelist>
<parameterdescription>
<para>Árvore a inserir os ID&apos;s dos users.</para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>id</parametername>
</parameternamelist>
<parameterdescription>
<para>String com o id a ser guardado.</para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>login</parametername>
</parameternamelist>
<parameterdescription>
<para>String com o login associado ao id.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Árvore com o user adicionado. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="data_tree.c" line="125" column="11" bodyfile="data_tree.c" bodystart="125" bodyend="143"/>
      </memberdef>
      <memberdef kind="function" id="data__tree_8c_1ae83344c676461ec63338c1da6071ddcc" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="data__tree_8h_1a519b47b366ce8ed237efaf19c7cc1e4d" kindref="member">TREEUSERS</ref></type>
        <definition>TREEUSERS iniUsersTREE</definition>
        <argsstring>(USERS users)</argsstring>
        <name>iniUsersTREE</name>
        <param>
          <type><ref refid="data__users_8h_1a71fe1a6475f0342b4c6f7c3f2bc52760" kindref="member">USERS</ref></type>
          <declname>users</declname>
        </param>
        <briefdescription>
<para>Função que inicializa a árvore de users. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>users</parametername>
</parameternamelist>
<parameterdescription>
<para>Catálogo de users.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Retorna a árvore criada apartir da lista de users. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="data_tree.c" line="152" column="11" bodyfile="data_tree.c" bodystart="152" bodyend="166"/>
      </memberdef>
      <memberdef kind="function" id="data__tree_8c_1aba9218b7c62cb38d91fa79553d28cd8a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="data__tree_8h_1ae7a19ed299494b455f1f935624022669" kindref="member">TREEUSERS9</ref></type>
        <definition>TREEUSERS9 addUsersTREE9</definition>
        <argsstring>(TREEUSERS9 tree, char *id, USERS user)</argsstring>
        <name>addUsersTREE9</name>
        <param>
          <type><ref refid="data__tree_8h_1ae7a19ed299494b455f1f935624022669" kindref="member">TREEUSERS9</ref></type>
          <declname>tree</declname>
        </param>
        <param>
          <type>char *</type>
          <declname>id</declname>
        </param>
        <param>
          <type><ref refid="data__users_8h_1a71fe1a6475f0342b4c6f7c3f2bc52760" kindref="member">USERS</ref></type>
          <declname>user</declname>
        </param>
        <briefdescription>
<para>Função que adiciona nodos a uma árvore de users da query 9. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>tree</parametername>
</parameternamelist>
<parameterdescription>
<para>Árvore a inserir os ID&apos;s dos users.</para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>id</parametername>
</parameternamelist>
<parameterdescription>
<para>String com o id a ser guardado.</para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>login</parametername>
</parameternamelist>
<parameterdescription>
<para>String com o login associado ao id.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Árvore com o user adicionado. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="data_tree.c" line="179" column="12" bodyfile="data_tree.c" bodystart="179" bodyend="197"/>
      </memberdef>
      <memberdef kind="function" id="data__tree_8c_1a9c2e12210f7c4221da34aa2d80c7c1f8" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="data__tree_8h_1ae7a19ed299494b455f1f935624022669" kindref="member">TREEUSERS9</ref></type>
        <definition>TREEUSERS9 iniUsersTREE9</definition>
        <argsstring>(USERS users)</argsstring>
        <name>iniUsersTREE9</name>
        <param>
          <type><ref refid="data__users_8h_1a71fe1a6475f0342b4c6f7c3f2bc52760" kindref="member">USERS</ref></type>
          <declname>users</declname>
        </param>
        <briefdescription>
<para>Função que inicializa a árvore de users da query 9. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>users</parametername>
</parameternamelist>
<parameterdescription>
<para>Catálogo de users.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Retorna a árvore criada apartir da lista de users. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="data_tree.c" line="206" column="12" bodyfile="data_tree.c" bodystart="206" bodyend="219"/>
      </memberdef>
      <memberdef kind="function" id="data__tree_8c_1a2a2ad278cc5ba9d7ad9c44f0810016cf" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="data__tree_8h_1a56fdcf9c363f3fb663c2f1553a83a6a9" kindref="member">TREEREPOS</ref></type>
        <definition>TREEREPOS addReposTREE</definition>
        <argsstring>(TREEREPOS tree, char *id, char *message)</argsstring>
        <name>addReposTREE</name>
        <param>
          <type><ref refid="data__tree_8h_1a56fdcf9c363f3fb663c2f1553a83a6a9" kindref="member">TREEREPOS</ref></type>
          <declname>tree</declname>
        </param>
        <param>
          <type>char *</type>
          <declname>id</declname>
        </param>
        <param>
          <type>char *</type>
          <declname>message</declname>
        </param>
        <briefdescription>
<para>Função que adiciona nodos a uma árvore de repositórios. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>tree</parametername>
</parameternamelist>
<parameterdescription>
<para>Árvore a inserir os ID&apos;s dos repositórios.</para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>id</parametername>
</parameternamelist>
<parameterdescription>
<para>String com o id a ser guardado.</para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>message</parametername>
</parameternamelist>
<parameterdescription>
<para>String com a menssagem associado ao id.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Árvore com o repositório adicionado. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="data_tree.c" line="232" column="11" bodyfile="data_tree.c" bodystart="232" bodyend="250"/>
      </memberdef>
      <memberdef kind="function" id="data__tree_8c_1a1565fc2785db11f2e866e183768f35e8" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="data__tree_8h_1a56fdcf9c363f3fb663c2f1553a83a6a9" kindref="member">TREEREPOS</ref></type>
        <definition>TREEREPOS iniReposTREE</definition>
        <argsstring>(REPOS repos)</argsstring>
        <name>iniReposTREE</name>
        <param>
          <type><ref refid="data__repos_8h_1ae323904139d1862c9eae86924398028d" kindref="member">REPOS</ref></type>
          <declname>repos</declname>
        </param>
        <briefdescription>
<para>Função que inicializa a árvore de repositórios. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>repos</parametername>
</parameternamelist>
<parameterdescription>
<para>Catálogo de repositórios.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Retorna a árvore criada apartir da lista de repositórios. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="data_tree.c" line="259" column="11" bodyfile="data_tree.c" bodystart="259" bodyend="273"/>
      </memberdef>
      <memberdef kind="function" id="data__tree_8c_1a34f5edb7f5874cc486858411974c0b96" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="data__tree_8h_1a56fdcf9c363f3fb663c2f1553a83a6a9" kindref="member">TREEREPOS</ref></type>
        <definition>TREEREPOS iniReposTREE9</definition>
        <argsstring>(REPOS repos)</argsstring>
        <name>iniReposTREE9</name>
        <param>
          <type><ref refid="data__repos_8h_1ae323904139d1862c9eae86924398028d" kindref="member">REPOS</ref></type>
          <declname>repos</declname>
        </param>
        <briefdescription>
<para>Função que inicializa a árvore de repositórios da query 9. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>repos</parametername>
</parameternamelist>
<parameterdescription>
<para>Catálogo de repositórios.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Retorna a árvore criada apartir da lista de repositórios. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="data_tree.c" line="282" column="11" bodyfile="data_tree.c" bodystart="282" bodyend="296"/>
      </memberdef>
      <memberdef kind="function" id="data__tree_8c_1aeb08a84830917a5d5d0f343cff03f335" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int search</definition>
        <argsstring>(TREE tree, int x)</argsstring>
        <name>search</name>
        <param>
          <type><ref refid="data__tree_8h_1ac0e4efc186caf2b97b1366033992c135" kindref="member">TREE</ref></type>
          <declname>tree</declname>
        </param>
        <param>
          <type>int</type>
          <declname>x</declname>
        </param>
        <briefdescription>
<para>Função que procura numa árvore binária o elemento especificado. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>tree</parametername>
</parameternamelist>
<parameterdescription>
<para>Árvore binária aonde se irá procurar o elemento</para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>x</parametername>
</parameternamelist>
<parameterdescription>
<para>Elemento a encontrar na árvore binária.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Retorna 1 se o elemento for encontrado. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="data_tree.c" line="307" column="5" bodyfile="data_tree.c" bodystart="307" bodyend="316"/>
      </memberdef>
      <memberdef kind="function" id="data__tree_8c_1aea5e5e964adbddeba8bc9b28edffa2da" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void printTree</definition>
        <argsstring>(TREE tree)</argsstring>
        <name>printTree</name>
        <param>
          <type><ref refid="data__tree_8h_1ac0e4efc186caf2b97b1366033992c135" kindref="member">TREE</ref></type>
          <declname>tree</declname>
        </param>
        <briefdescription>
<para>Função que permite a impressão in order da árvore binária. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>tree</parametername>
</parameternamelist>
<parameterdescription>
<para>Árvore binária a imprimir. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="data_tree.c" line="323" column="6" bodyfile="data_tree.c" bodystart="323" bodyend="331"/>
      </memberdef>
      <memberdef kind="function" id="data__tree_8c_1a35b0424230cce746bafe0fdb078c0e9e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void freeTree</definition>
        <argsstring>(TREE node)</argsstring>
        <name>freeTree</name>
        <param>
          <type><ref refid="data__tree_8h_1ac0e4efc186caf2b97b1366033992c135" kindref="member">TREE</ref></type>
          <declname>node</declname>
        </param>
        <briefdescription>
<para>Função que permite libertar o espaço ocupado pela árvore binária. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>node</parametername>
</parameternamelist>
<parameterdescription>
<para>Árvore. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="data_tree.c" line="338" column="6" bodyfile="data_tree.c" bodystart="338" bodyend="344"/>
      </memberdef>
      <memberdef kind="function" id="data__tree_8c_1af30f811f4a786e9f8845b60ab7161697" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void freeTreeUsers</definition>
        <argsstring>(TREEUSERS node)</argsstring>
        <name>freeTreeUsers</name>
        <param>
          <type><ref refid="data__tree_8h_1a519b47b366ce8ed237efaf19c7cc1e4d" kindref="member">TREEUSERS</ref></type>
          <declname>node</declname>
        </param>
        <briefdescription>
<para>Função que permite libertar o espaço ocupado pela árvore de users. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>node</parametername>
</parameternamelist>
<parameterdescription>
<para>Árvore. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="data_tree.c" line="351" column="6" bodyfile="data_tree.c" bodystart="351" bodyend="357"/>
      </memberdef>
      <memberdef kind="function" id="data__tree_8c_1a4e89413c85c0181bf82952e2a2f381bd" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void freeTreeRepos</definition>
        <argsstring>(TREEREPOS node)</argsstring>
        <name>freeTreeRepos</name>
        <param>
          <type><ref refid="data__tree_8h_1a56fdcf9c363f3fb663c2f1553a83a6a9" kindref="member">TREEREPOS</ref></type>
          <declname>node</declname>
        </param>
        <briefdescription>
<para>Função que permite libertar o espaço ocupado pela árvore binária. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>node</parametername>
</parameternamelist>
<parameterdescription>
<para>Árvore. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="data_tree.c" line="364" column="6" bodyfile="data_tree.c" bodystart="364" bodyend="370"/>
      </memberdef>
      <memberdef kind="function" id="data__tree_8c_1ab10923aaf4bec3a6d226ddeec9a8c777" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int countnodes</definition>
        <argsstring>(TREE tree)</argsstring>
        <name>countnodes</name>
        <param>
          <type><ref refid="data__tree_8h_1ac0e4efc186caf2b97b1366033992c135" kindref="member">TREE</ref></type>
          <declname>tree</declname>
        </param>
        <briefdescription>
<para>Função que o número de nodos de uma árvore binária. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>node</parametername>
</parameternamelist>
<parameterdescription>
<para>Árvore. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="data_tree.c" line="378" column="5" bodyfile="data_tree.c" bodystart="378" bodyend="382"/>
      </memberdef>
      <memberdef kind="function" id="data__tree_8c_1a6bd8de736b75e89de56d0704c7067c73" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>char *</type>
        <definition>char * searchUsers</definition>
        <argsstring>(TREEUSERS tree, char *x)</argsstring>
        <name>searchUsers</name>
        <param>
          <type><ref refid="data__tree_8h_1a519b47b366ce8ed237efaf19c7cc1e4d" kindref="member">TREEUSERS</ref></type>
          <declname>tree</declname>
        </param>
        <param>
          <type>char *</type>
          <declname>x</declname>
        </param>
        <briefdescription>
<para>Função que procura numa árvore de users o elemento especificado. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>tree</parametername>
</parameternamelist>
<parameterdescription>
<para>Árvore de users aonde se irá procurar o elemento</para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>x</parametername>
</parameternamelist>
<parameterdescription>
<para>Elemento a encontrar na árvore de users.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Retorna o elemento encontrado. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="data_tree.c" line="393" column="7" bodyfile="data_tree.c" bodystart="393" bodyend="402"/>
      </memberdef>
      <memberdef kind="function" id="data__tree_8c_1ab525532283c815cbf66c0b7be898122a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="data__users_8h_1a71fe1a6475f0342b4c6f7c3f2bc52760" kindref="member">USERS</ref></type>
        <definition>USERS searchUsers9</definition>
        <argsstring>(TREEUSERS9 tree, char *x)</argsstring>
        <name>searchUsers9</name>
        <param>
          <type><ref refid="data__tree_8h_1ae7a19ed299494b455f1f935624022669" kindref="member">TREEUSERS9</ref></type>
          <declname>tree</declname>
        </param>
        <param>
          <type>char *</type>
          <declname>x</declname>
        </param>
        <briefdescription>
<para>Função que procura numa árvore de users da query 9 o elemento especificado. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>tree</parametername>
</parameternamelist>
<parameterdescription>
<para>Árvore de users aonde se irá procurar o elemento</para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>x</parametername>
</parameternamelist>
<parameterdescription>
<para>Elemento a encontrar na árvore de users da query 9.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Retorna o elemento encontrado. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="data_tree.c" line="413" column="7" bodyfile="data_tree.c" bodystart="413" bodyend="422"/>
      </memberdef>
      <memberdef kind="function" id="data__tree_8c_1a5a0e82b471da785140fe1e1593b7c115" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>char *</type>
        <definition>char * searchRepos</definition>
        <argsstring>(TREEREPOS tree, char *x)</argsstring>
        <name>searchRepos</name>
        <param>
          <type><ref refid="data__tree_8h_1a56fdcf9c363f3fb663c2f1553a83a6a9" kindref="member">TREEREPOS</ref></type>
          <declname>tree</declname>
        </param>
        <param>
          <type>char *</type>
          <declname>x</declname>
        </param>
        <briefdescription>
<para>Função que procura numa árvore de repositórios o elemento especificado. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>tree</parametername>
</parameternamelist>
<parameterdescription>
<para>Árvore de repositórios aonde se irá procurar o elemento</para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>x</parametername>
</parameternamelist>
<parameterdescription>
<para>Elemento a encontrar na árvore de repositórios.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Retorna o elemento encontrado. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="data_tree.c" line="433" column="7" bodyfile="data_tree.c" bodystart="433" bodyend="442"/>
      </memberdef>
      <memberdef kind="function" id="data__tree_8c_1a0a88042ec7804bda4bf0a321ea03b4bf" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="data__tree_8h_1ac0e4efc186caf2b97b1366033992c135" kindref="member">TREE</ref></type>
        <definition>TREE friendsTreeF</definition>
        <argsstring>(USERS users, int *k)</argsstring>
        <name>friendsTreeF</name>
        <param>
          <type><ref refid="data__users_8h_1a71fe1a6475f0342b4c6f7c3f2bc52760" kindref="member">USERS</ref></type>
          <declname>users</declname>
        </param>
        <param>
          <type>int *</type>
          <declname>k</declname>
        </param>
        <briefdescription>
<para>Função que cria uma árvore com os amigos de um determinado user. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>users</parametername>
</parameternamelist>
<parameterdescription>
<para>Nodo do catalogo users.</para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>x</parametername>
</parameternamelist>
<parameterdescription>
<para>Número de amigos.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Retorna a árvore dos amigos. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="data_tree.c" line="453" column="6" bodyfile="data_tree.c" bodystart="453" bodyend="493"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="normal"></highlight></codeline>
<codeline lineno="4"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="data__tree_8h" kindref="compound">data_tree.h</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5"><highlight class="normal"></highlight></codeline>
<codeline lineno="10" refid="structtree" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structtree" kindref="compound">tree</ref><sp/></highlight></codeline>
<codeline lineno="11"><highlight class="normal">{</highlight></codeline>
<codeline lineno="13"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="structtree_1a018ae6bc00da4b35baf1beeb30400c42" kindref="member">value</ref>;</highlight></codeline>
<codeline lineno="15"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structtree" kindref="compound">tree</ref><sp/>*<ref refid="structtree_1a083c30bd3490726413b3fb58372df5bb" kindref="member">l</ref>,<sp/>*<ref refid="structtree_1aa8e8c4e1f409bcc1f39617c2645106dc" kindref="member">r</ref>;</highlight></codeline>
<codeline lineno="16"><highlight class="normal">};</highlight></codeline>
<codeline lineno="17"><highlight class="normal"></highlight></codeline>
<codeline lineno="22" refid="structtreeUsers" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structtreeUsers" kindref="compound">treeUsers</ref></highlight></codeline>
<codeline lineno="23"><highlight class="normal">{</highlight></codeline>
<codeline lineno="25"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*<sp/><ref refid="structtreeUsers_1a5f2ff905243837367681e892f79b6071" kindref="member">id</ref>;</highlight></codeline>
<codeline lineno="27"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*<sp/><ref refid="structtreeUsers_1a8d68f63f9455d54fb0ebc09d8c559ebd" kindref="member">login</ref>;</highlight></codeline>
<codeline lineno="29"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structtreeUsers" kindref="compound">treeUsers</ref><sp/>*<ref refid="structtreeUsers_1a40aa2defa136c59da42d8fa25189a4e3" kindref="member">l</ref>,<sp/>*<ref refid="structtreeUsers_1aaf580e859d964eb6cbbaa3ae4ce6e89d" kindref="member">r</ref>;</highlight></codeline>
<codeline lineno="30"><highlight class="normal">};</highlight></codeline>
<codeline lineno="31"><highlight class="normal"></highlight></codeline>
<codeline lineno="32" refid="structtreeUsers9" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structtreeUsers9" kindref="compound">treeUsers9</ref></highlight></codeline>
<codeline lineno="33"><highlight class="normal">{</highlight></codeline>
<codeline lineno="35"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*<sp/><ref refid="structtreeUsers9_1a27a0b907c3368819202121ff47153420" kindref="member">id</ref>;</highlight></codeline>
<codeline lineno="37"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structusers" kindref="compound">users</ref><sp/>*<ref refid="structtreeUsers9_1a0ebc9e14694eb158581582d30855bb95" kindref="member">node</ref>;</highlight></codeline>
<codeline lineno="39"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structtreeUsers9" kindref="compound">treeUsers9</ref><sp/>*<ref refid="structtreeUsers9_1ab3b231720e18ecd9e52484bbae948929" kindref="member">l</ref>,<sp/>*<ref refid="structtreeUsers9_1a679b87581d26e23a249d6f20e4513968" kindref="member">r</ref>;</highlight></codeline>
<codeline lineno="40"><highlight class="normal">};</highlight></codeline>
<codeline lineno="41"><highlight class="normal"></highlight></codeline>
<codeline lineno="46" refid="structtreeRepos" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structtreeRepos" kindref="compound">treeRepos</ref></highlight></codeline>
<codeline lineno="47"><highlight class="normal">{</highlight></codeline>
<codeline lineno="49"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*<sp/><ref refid="structtreeRepos_1ae0d60c02231ee48624bd691af9564167" kindref="member">id</ref>;</highlight></codeline>
<codeline lineno="51"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*<sp/><ref refid="structtreeRepos_1a4accb8b2103b9aa5eff70f10a26b01f5" kindref="member">message</ref>;</highlight></codeline>
<codeline lineno="53"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structtreeRepos" kindref="compound">treeRepos</ref><sp/>*<ref refid="structtreeRepos_1a2cfcbe8f4ac39861066bc1e7d605c423" kindref="member">l</ref>,<sp/>*<ref refid="structtreeRepos_1a2a7406b1fb2cb03d2c3c195aca0c34f2" kindref="member">r</ref>;</highlight></codeline>
<codeline lineno="54"><highlight class="normal">};</highlight></codeline>
<codeline lineno="55"><highlight class="normal"></highlight></codeline>
<codeline lineno="65"><highlight class="normal"><ref refid="structtree" kindref="compound">TREE</ref><sp/><ref refid="data__tree_8c_1a046d3ee75787615cc6a9cc1bca11521f" kindref="member">insert</ref><sp/>(<ref refid="structtree" kindref="compound">TREE</ref><sp/><ref refid="structtree" kindref="compound">tree</ref>,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>x)<sp/></highlight></codeline>
<codeline lineno="66"><highlight class="normal">{</highlight></codeline>
<codeline lineno="67"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structtree" kindref="compound">TREE</ref><sp/>*place;</highlight></codeline>
<codeline lineno="68"><highlight class="normal"><sp/><sp/><sp/><sp/>place<sp/>=<sp/>&amp;<ref refid="structtree" kindref="compound">tree</ref>;</highlight></codeline>
<codeline lineno="69"><highlight class="normal"></highlight></codeline>
<codeline lineno="70"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(*place<sp/>!=<sp/>NULL)</highlight></codeline>
<codeline lineno="71"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(x<sp/>&lt;<sp/>(*place)-&gt;value)</highlight></codeline>
<codeline lineno="72"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>place<sp/>=<sp/>&amp;((*place)-&gt;l);</highlight></codeline>
<codeline lineno="73"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>place<sp/>=<sp/>&amp;((*place)-&gt;r);</highlight></codeline>
<codeline lineno="74"><highlight class="normal"></highlight></codeline>
<codeline lineno="75"><highlight class="normal"><sp/><sp/><sp/><sp/>(*place)<sp/>=<sp/>malloc<sp/>(</highlight><highlight class="keyword">sizeof</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keyword">struct</highlight><highlight class="normal"><sp/><ref refid="structtree" kindref="compound">tree</ref>));</highlight></codeline>
<codeline lineno="76"><highlight class="normal"><sp/><sp/><sp/><sp/>(*place)-&gt;value<sp/>=<sp/>x;</highlight></codeline>
<codeline lineno="77"><highlight class="normal"><sp/><sp/><sp/><sp/>(*place)-&gt;l<sp/>=<sp/>(*place)-&gt;r<sp/>=<sp/>NULL;</highlight></codeline>
<codeline lineno="78"><highlight class="normal"></highlight></codeline>
<codeline lineno="79"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="structtree" kindref="compound">tree</ref>;</highlight></codeline>
<codeline lineno="80"><highlight class="normal">}</highlight></codeline>
<codeline lineno="81"><highlight class="normal"></highlight></codeline>
<codeline lineno="93"><highlight class="normal"><ref refid="structtree" kindref="compound">TREE</ref><sp/><ref refid="data__tree_8c_1a8d3d97f663d3b4a863d0fc67497451e8" kindref="member">filterRepos_Lang</ref>(</highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*lang,<sp/><ref refid="structrepos" kindref="compound">REPOS</ref><sp/><ref refid="structrepos" kindref="compound">repos</ref>,<sp/><ref refid="structtree" kindref="compound">TREE</ref><sp/><ref refid="structtree" kindref="compound">tree</ref>)</highlight></codeline>
<codeline lineno="94"><highlight class="normal">{</highlight></codeline>
<codeline lineno="95"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="96"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structrepos" kindref="compound">REPOS</ref><sp/>temp<sp/>=<sp/><ref refid="structrepos" kindref="compound">repos</ref>;</highlight></codeline>
<codeline lineno="97"><highlight class="normal"></highlight></codeline>
<codeline lineno="98"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(<ref refid="data__repos_8c_1a84ffbc5e48520c0bd4b30252cd93b3a9" kindref="member">isEmptyRepos</ref>(temp)==0)</highlight></codeline>
<codeline lineno="99"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="100"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//strcmpi<sp/>para<sp/>comparar<sp/>com<sp/>case<sp/>insentitivity</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="101"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*langRep<sp/>=<sp/><ref refid="data__repos_8c_1a443b53153950cbac18091b4043164d73" kindref="member">obtain_langRepos</ref>(temp);</highlight></codeline>
<codeline lineno="102"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(strcasecmp(lang,langRep)==0)</highlight></codeline>
<codeline lineno="103"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="104"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*idRep<sp/>=<sp/><ref refid="data__repos_8c_1a04e9275ad9aeaafcd7767169ea35d041" kindref="member">obtain_reposID</ref>(temp);</highlight></codeline>
<codeline lineno="105"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>k=atoi(idRep);</highlight></codeline>
<codeline lineno="106"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>i++;</highlight></codeline>
<codeline lineno="107"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structtree" kindref="compound">tree</ref><sp/>=<sp/><ref refid="data__tree_8c_1a046d3ee75787615cc6a9cc1bca11521f" kindref="member">insert</ref>(<ref refid="structtree" kindref="compound">tree</ref>,k);</highlight></codeline>
<codeline lineno="108"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="109"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>temp<sp/>=<sp/><ref refid="data__repos_8c_1a85b0a74908377addc0e65b5365762001" kindref="member">obtain_nextRepos</ref>(temp);</highlight></codeline>
<codeline lineno="110"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="111"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="structtree" kindref="compound">tree</ref>;</highlight></codeline>
<codeline lineno="112"><highlight class="normal">}</highlight></codeline>
<codeline lineno="113"><highlight class="normal"></highlight></codeline>
<codeline lineno="125"><highlight class="normal"><ref refid="structtreeUsers" kindref="compound">TREEUSERS</ref><sp/><ref refid="data__tree_8c_1a4497f147976f474d12058b0ce4f74417" kindref="member">addUsersTREE</ref>(<ref refid="structtreeUsers" kindref="compound">TREEUSERS</ref><sp/><ref refid="structtree" kindref="compound">tree</ref>,<sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*</highlight><highlight class="keywordtype">id</highlight><highlight class="normal">,<sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*login)</highlight></codeline>
<codeline lineno="126"><highlight class="normal">{</highlight></codeline>
<codeline lineno="127"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structtreeUsers" kindref="compound">TREEUSERS</ref><sp/>*place;</highlight></codeline>
<codeline lineno="128"><highlight class="normal"><sp/><sp/><sp/><sp/>place<sp/>=<sp/>&amp;<ref refid="structtree" kindref="compound">tree</ref>;</highlight></codeline>
<codeline lineno="129"><highlight class="normal"></highlight></codeline>
<codeline lineno="130"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(*place<sp/>!=<sp/>NULL)</highlight></codeline>
<codeline lineno="131"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="132"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(strcmp(</highlight><highlight class="keywordtype">id</highlight><highlight class="normal">,(*place)-&gt;id)<sp/>&lt;<sp/>0)</highlight></codeline>
<codeline lineno="133"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>place<sp/>=<sp/>&amp;((*place)-&gt;l);</highlight></codeline>
<codeline lineno="134"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>place<sp/>=<sp/>&amp;((*place)-&gt;r);</highlight></codeline>
<codeline lineno="135"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="136"><highlight class="normal"></highlight></codeline>
<codeline lineno="137"><highlight class="normal"><sp/><sp/><sp/><sp/>(*place)<sp/>=<sp/>malloc<sp/>(</highlight><highlight class="keyword">sizeof</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keyword">struct</highlight><highlight class="normal"><sp/><ref refid="structtreeUsers" kindref="compound">treeUsers</ref>));</highlight></codeline>
<codeline lineno="138"><highlight class="normal"><sp/><sp/><sp/><sp/>(*place)-&gt;id<sp/>=<sp/>strdup(</highlight><highlight class="keywordtype">id</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="139"><highlight class="normal"><sp/><sp/><sp/><sp/>(*place)-&gt;login<sp/>=<sp/>strdup(login);</highlight></codeline>
<codeline lineno="140"><highlight class="normal"><sp/><sp/><sp/><sp/>(*place)-&gt;l<sp/>=<sp/>(*place)-&gt;r<sp/>=<sp/>NULL;</highlight></codeline>
<codeline lineno="141"><highlight class="normal"></highlight></codeline>
<codeline lineno="142"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="structtree" kindref="compound">tree</ref>;</highlight></codeline>
<codeline lineno="143"><highlight class="normal">}</highlight></codeline>
<codeline lineno="144"><highlight class="normal"></highlight></codeline>
<codeline lineno="152"><highlight class="normal"><ref refid="structtreeUsers" kindref="compound">TREEUSERS</ref><sp/><ref refid="data__tree_8c_1ae83344c676461ec63338c1da6071ddcc" kindref="member">iniUsersTREE</ref>(<ref refid="structusers" kindref="compound">USERS</ref><sp/><ref refid="structusers" kindref="compound">users</ref>)</highlight></codeline>
<codeline lineno="153"><highlight class="normal">{</highlight></codeline>
<codeline lineno="154"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structtreeUsers" kindref="compound">TREEUSERS</ref><sp/>place<sp/>=<sp/>malloc(</highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(</highlight><highlight class="keyword">struct</highlight><highlight class="normal"><sp/><ref refid="structtreeUsers" kindref="compound">treeUsers</ref>));</highlight></codeline>
<codeline lineno="155"><highlight class="normal"><sp/><sp/><sp/><sp/>place<sp/>=<sp/>NULL;</highlight></codeline>
<codeline lineno="156"><highlight class="normal"></highlight></codeline>
<codeline lineno="157"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(<ref refid="data__users_8c_1a0f635b6fe309a5ac5cdb01f9068f710f" kindref="member">isEmptyUsers</ref>(<ref refid="structusers" kindref="compound">users</ref>)<sp/>==<sp/>0)</highlight></codeline>
<codeline lineno="158"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="159"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*<sp/></highlight><highlight class="keywordtype">id</highlight><highlight class="normal"><sp/>=<sp/><ref refid="data__users_8c_1aef195ddd430d9c550484241eb945d0ac" kindref="member">obtain_IdUsers</ref>(<ref refid="structusers" kindref="compound">users</ref>);</highlight></codeline>
<codeline lineno="160"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*<sp/>login<sp/>=<sp/><ref refid="data__users_8c_1a8eb776fafbd03dd4e7c6e15262d805a9" kindref="member">obtain_LoginUsers</ref>(<ref refid="structusers" kindref="compound">users</ref>);</highlight></codeline>
<codeline lineno="161"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>place<sp/>=<sp/><ref refid="data__tree_8c_1a4497f147976f474d12058b0ce4f74417" kindref="member">addUsersTREE</ref>(place,<sp/></highlight><highlight class="keywordtype">id</highlight><highlight class="normal">,<sp/>login);</highlight></codeline>
<codeline lineno="162"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structusers" kindref="compound">users</ref><sp/>=<sp/><ref refid="data__users_8c_1a2fb4b2dab8473ceae9cac7cdc82193fc" kindref="member">obtain_nextUser</ref>(<ref refid="structusers" kindref="compound">users</ref>);</highlight></codeline>
<codeline lineno="163"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="164"><highlight class="normal"></highlight></codeline>
<codeline lineno="165"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>place;</highlight></codeline>
<codeline lineno="166"><highlight class="normal">}</highlight></codeline>
<codeline lineno="167"><highlight class="normal"></highlight></codeline>
<codeline lineno="179"><highlight class="normal"><ref refid="structtreeUsers9" kindref="compound">TREEUSERS9</ref><sp/><ref refid="data__tree_8c_1aba9218b7c62cb38d91fa79553d28cd8a" kindref="member">addUsersTREE9</ref>(<ref refid="structtreeUsers9" kindref="compound">TREEUSERS9</ref><sp/><ref refid="structtree" kindref="compound">tree</ref>,<sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*</highlight><highlight class="keywordtype">id</highlight><highlight class="normal">,<sp/><ref refid="structusers" kindref="compound">USERS</ref><sp/>user)</highlight></codeline>
<codeline lineno="180"><highlight class="normal">{</highlight></codeline>
<codeline lineno="181"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structtreeUsers9" kindref="compound">TREEUSERS9</ref><sp/>*place;</highlight></codeline>
<codeline lineno="182"><highlight class="normal"><sp/><sp/><sp/><sp/>place<sp/>=<sp/>&amp;<ref refid="structtree" kindref="compound">tree</ref>;</highlight></codeline>
<codeline lineno="183"><highlight class="normal"></highlight></codeline>
<codeline lineno="184"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(*place<sp/>!=<sp/>NULL)</highlight></codeline>
<codeline lineno="185"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="186"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(strcmp(</highlight><highlight class="keywordtype">id</highlight><highlight class="normal">,(*place)-&gt;id)<sp/>&lt;<sp/>0)</highlight></codeline>
<codeline lineno="187"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>place<sp/>=<sp/>&amp;((*place)-&gt;l);</highlight></codeline>
<codeline lineno="188"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>place<sp/>=<sp/>&amp;((*place)-&gt;r);</highlight></codeline>
<codeline lineno="189"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="190"><highlight class="normal"></highlight></codeline>
<codeline lineno="191"><highlight class="normal"><sp/><sp/><sp/><sp/>(*place)<sp/>=<sp/>malloc<sp/>(</highlight><highlight class="keyword">sizeof</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keyword">struct</highlight><highlight class="normal"><sp/><ref refid="structtreeUsers9" kindref="compound">treeUsers9</ref>));</highlight></codeline>
<codeline lineno="192"><highlight class="normal"><sp/><sp/><sp/><sp/>(*place)-&gt;id<sp/>=<sp/>strdup(</highlight><highlight class="keywordtype">id</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="193"><highlight class="normal"><sp/><sp/><sp/><sp/>(*place)-&gt;node<sp/>=<sp/>user;</highlight></codeline>
<codeline lineno="194"><highlight class="normal"><sp/><sp/><sp/><sp/>(*place)-&gt;l<sp/>=<sp/>(*place)-&gt;r<sp/>=<sp/>NULL;</highlight></codeline>
<codeline lineno="195"><highlight class="normal"></highlight></codeline>
<codeline lineno="196"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="structtree" kindref="compound">tree</ref>;</highlight></codeline>
<codeline lineno="197"><highlight class="normal">}</highlight></codeline>
<codeline lineno="198"><highlight class="normal"></highlight></codeline>
<codeline lineno="206"><highlight class="normal"><ref refid="structtreeUsers9" kindref="compound">TREEUSERS9</ref><sp/><ref refid="data__tree_8c_1a9c2e12210f7c4221da34aa2d80c7c1f8" kindref="member">iniUsersTREE9</ref>(<ref refid="structusers" kindref="compound">USERS</ref><sp/><ref refid="structusers" kindref="compound">users</ref>)</highlight></codeline>
<codeline lineno="207"><highlight class="normal">{</highlight></codeline>
<codeline lineno="208"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structtreeUsers9" kindref="compound">TREEUSERS9</ref><sp/>place<sp/>=<sp/>malloc(</highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(</highlight><highlight class="keyword">struct</highlight><highlight class="normal"><sp/><ref refid="structtreeUsers9" kindref="compound">treeUsers9</ref>));</highlight></codeline>
<codeline lineno="209"><highlight class="normal"><sp/><sp/><sp/><sp/>place<sp/>=<sp/>NULL;</highlight></codeline>
<codeline lineno="210"><highlight class="normal"></highlight></codeline>
<codeline lineno="211"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(<ref refid="data__users_8c_1a0f635b6fe309a5ac5cdb01f9068f710f" kindref="member">isEmptyUsers</ref>(<ref refid="structusers" kindref="compound">users</ref>)<sp/>==<sp/>0)</highlight></codeline>
<codeline lineno="212"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="213"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*<sp/></highlight><highlight class="keywordtype">id</highlight><highlight class="normal"><sp/>=<sp/><ref refid="data__users_8c_1aef195ddd430d9c550484241eb945d0ac" kindref="member">obtain_IdUsers</ref>(<ref refid="structusers" kindref="compound">users</ref>);</highlight></codeline>
<codeline lineno="214"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>place<sp/>=<sp/><ref refid="data__tree_8c_1aba9218b7c62cb38d91fa79553d28cd8a" kindref="member">addUsersTREE9</ref>(place,<sp/></highlight><highlight class="keywordtype">id</highlight><highlight class="normal">,<sp/><ref refid="structusers" kindref="compound">users</ref>);</highlight></codeline>
<codeline lineno="215"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structusers" kindref="compound">users</ref><sp/>=<sp/><ref refid="data__users_8c_1a2fb4b2dab8473ceae9cac7cdc82193fc" kindref="member">obtain_nextUser</ref>(<ref refid="structusers" kindref="compound">users</ref>);</highlight></codeline>
<codeline lineno="216"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="217"><highlight class="normal"></highlight></codeline>
<codeline lineno="218"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>place;</highlight></codeline>
<codeline lineno="219"><highlight class="normal">}</highlight></codeline>
<codeline lineno="220"><highlight class="normal"></highlight></codeline>
<codeline lineno="232"><highlight class="normal"><ref refid="structtreeRepos" kindref="compound">TREEREPOS</ref><sp/><ref refid="data__tree_8c_1a2a2ad278cc5ba9d7ad9c44f0810016cf" kindref="member">addReposTREE</ref>(<ref refid="structtreeRepos" kindref="compound">TREEREPOS</ref><sp/><ref refid="structtree" kindref="compound">tree</ref>,<sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*</highlight><highlight class="keywordtype">id</highlight><highlight class="normal">,<sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*<ref refid="structtreeRepos_1a4accb8b2103b9aa5eff70f10a26b01f5" kindref="member">message</ref>)</highlight></codeline>
<codeline lineno="233"><highlight class="normal">{</highlight></codeline>
<codeline lineno="234"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structtreeRepos" kindref="compound">TREEREPOS</ref><sp/>*place;</highlight></codeline>
<codeline lineno="235"><highlight class="normal"><sp/><sp/><sp/><sp/>place<sp/>=<sp/>&amp;<ref refid="structtree" kindref="compound">tree</ref>;</highlight></codeline>
<codeline lineno="236"><highlight class="normal"></highlight></codeline>
<codeline lineno="237"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(*place<sp/>!=<sp/>NULL)</highlight></codeline>
<codeline lineno="238"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="239"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(strcmp(</highlight><highlight class="keywordtype">id</highlight><highlight class="normal">,(*place)-&gt;id)<sp/>&lt;<sp/>0)</highlight></codeline>
<codeline lineno="240"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>place<sp/>=<sp/>&amp;((*place)-&gt;l);</highlight></codeline>
<codeline lineno="241"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>place<sp/>=<sp/>&amp;((*place)-&gt;r);</highlight></codeline>
<codeline lineno="242"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="243"><highlight class="normal"></highlight></codeline>
<codeline lineno="244"><highlight class="normal"><sp/><sp/><sp/><sp/>(*place)<sp/>=<sp/>malloc<sp/>(</highlight><highlight class="keyword">sizeof</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keyword">struct</highlight><highlight class="normal"><sp/><ref refid="structtreeRepos" kindref="compound">treeRepos</ref>));</highlight></codeline>
<codeline lineno="245"><highlight class="normal"><sp/><sp/><sp/><sp/>(*place)-&gt;id<sp/>=<sp/>strdup(</highlight><highlight class="keywordtype">id</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="246"><highlight class="normal"><sp/><sp/><sp/><sp/>(*place)-&gt;message<sp/>=<sp/>strdup(<ref refid="structtreeRepos_1a4accb8b2103b9aa5eff70f10a26b01f5" kindref="member">message</ref>);</highlight></codeline>
<codeline lineno="247"><highlight class="normal"><sp/><sp/><sp/><sp/>(*place)-&gt;l<sp/>=<sp/>(*place)-&gt;r<sp/>=<sp/>NULL;</highlight></codeline>
<codeline lineno="248"><highlight class="normal"></highlight></codeline>
<codeline lineno="249"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="structtree" kindref="compound">tree</ref>;</highlight></codeline>
<codeline lineno="250"><highlight class="normal">}</highlight></codeline>
<codeline lineno="251"><highlight class="normal"></highlight></codeline>
<codeline lineno="259"><highlight class="normal"><ref refid="structtreeRepos" kindref="compound">TREEREPOS</ref><sp/><ref refid="data__tree_8c_1a1565fc2785db11f2e866e183768f35e8" kindref="member">iniReposTREE</ref>(<ref refid="structrepos" kindref="compound">REPOS</ref><sp/><ref refid="structrepos" kindref="compound">repos</ref>)</highlight></codeline>
<codeline lineno="260"><highlight class="normal">{</highlight></codeline>
<codeline lineno="261"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structtreeRepos" kindref="compound">TREEREPOS</ref><sp/>place<sp/>=<sp/>malloc(</highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(</highlight><highlight class="keyword">struct</highlight><highlight class="normal"><sp/><ref refid="structtreeRepos" kindref="compound">treeRepos</ref>));</highlight></codeline>
<codeline lineno="262"><highlight class="normal"><sp/><sp/><sp/><sp/>place<sp/>=<sp/>NULL;</highlight></codeline>
<codeline lineno="263"><highlight class="normal"></highlight></codeline>
<codeline lineno="264"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(<ref refid="data__repos_8c_1a84ffbc5e48520c0bd4b30252cd93b3a9" kindref="member">isEmptyRepos</ref>(<ref refid="structrepos" kindref="compound">repos</ref>)<sp/>==<sp/>0)</highlight></codeline>
<codeline lineno="265"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="266"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*<sp/></highlight><highlight class="keywordtype">id</highlight><highlight class="normal"><sp/>=<sp/><ref refid="data__repos_8c_1a04e9275ad9aeaafcd7767169ea35d041" kindref="member">obtain_reposID</ref>(<ref refid="structrepos" kindref="compound">repos</ref>);</highlight></codeline>
<codeline lineno="267"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*<sp/>login<sp/>=<sp/><ref refid="data__repos_8c_1a5383a8bee5e18c00bccd97b4db3ea90a" kindref="member">obtain_reposDescription</ref>(<ref refid="structrepos" kindref="compound">repos</ref>);</highlight></codeline>
<codeline lineno="268"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>place<sp/>=<sp/><ref refid="data__tree_8c_1a2a2ad278cc5ba9d7ad9c44f0810016cf" kindref="member">addReposTREE</ref>(place,<sp/></highlight><highlight class="keywordtype">id</highlight><highlight class="normal">,<sp/>login);</highlight></codeline>
<codeline lineno="269"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structrepos" kindref="compound">repos</ref><sp/>=<sp/><ref refid="data__repos_8c_1a85b0a74908377addc0e65b5365762001" kindref="member">obtain_nextRepos</ref>(<ref refid="structrepos" kindref="compound">repos</ref>);</highlight></codeline>
<codeline lineno="270"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="271"><highlight class="normal"></highlight></codeline>
<codeline lineno="272"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>place;</highlight></codeline>
<codeline lineno="273"><highlight class="normal">}</highlight></codeline>
<codeline lineno="274"><highlight class="normal"></highlight></codeline>
<codeline lineno="282"><highlight class="normal"><ref refid="structtreeRepos" kindref="compound">TREEREPOS</ref><sp/><ref refid="data__tree_8c_1a34f5edb7f5874cc486858411974c0b96" kindref="member">iniReposTREE9</ref>(<ref refid="structrepos" kindref="compound">REPOS</ref><sp/><ref refid="structrepos" kindref="compound">repos</ref>)</highlight></codeline>
<codeline lineno="283"><highlight class="normal">{</highlight></codeline>
<codeline lineno="284"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structtreeRepos" kindref="compound">TREEREPOS</ref><sp/>place<sp/>=<sp/>malloc(</highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(</highlight><highlight class="keyword">struct</highlight><highlight class="normal"><sp/><ref refid="structtreeRepos" kindref="compound">treeRepos</ref>));</highlight></codeline>
<codeline lineno="285"><highlight class="normal"><sp/><sp/><sp/><sp/>place<sp/>=<sp/>NULL;</highlight></codeline>
<codeline lineno="286"><highlight class="normal"></highlight></codeline>
<codeline lineno="287"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(<ref refid="data__repos_8c_1a84ffbc5e48520c0bd4b30252cd93b3a9" kindref="member">isEmptyRepos</ref>(<ref refid="structrepos" kindref="compound">repos</ref>)<sp/>==<sp/>0)</highlight></codeline>
<codeline lineno="288"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="289"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*<sp/></highlight><highlight class="keywordtype">id</highlight><highlight class="normal"><sp/>=<sp/><ref refid="data__repos_8c_1a04e9275ad9aeaafcd7767169ea35d041" kindref="member">obtain_reposID</ref>(<ref refid="structrepos" kindref="compound">repos</ref>);</highlight></codeline>
<codeline lineno="290"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*<sp/>login<sp/>=<sp/><ref refid="data__repos_8c_1ae0e3caa7b2a0c1cba9a931fa03bb3422" kindref="member">obtain_reposOwnerID</ref>(<ref refid="structrepos" kindref="compound">repos</ref>);</highlight></codeline>
<codeline lineno="291"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>place<sp/>=<sp/><ref refid="data__tree_8c_1a2a2ad278cc5ba9d7ad9c44f0810016cf" kindref="member">addReposTREE</ref>(place,<sp/></highlight><highlight class="keywordtype">id</highlight><highlight class="normal">,<sp/>login);</highlight></codeline>
<codeline lineno="292"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structrepos" kindref="compound">repos</ref><sp/>=<sp/><ref refid="data__repos_8c_1a85b0a74908377addc0e65b5365762001" kindref="member">obtain_nextRepos</ref>(<ref refid="structrepos" kindref="compound">repos</ref>);</highlight></codeline>
<codeline lineno="293"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="294"><highlight class="normal"></highlight></codeline>
<codeline lineno="295"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>place;</highlight></codeline>
<codeline lineno="296"><highlight class="normal">}</highlight></codeline>
<codeline lineno="297"><highlight class="normal"></highlight></codeline>
<codeline lineno="307"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="data__tree_8c_1aeb08a84830917a5d5d0f343cff03f335" kindref="member">search</ref><sp/>(<ref refid="structtree" kindref="compound">TREE</ref><sp/><ref refid="structtree" kindref="compound">tree</ref>,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>x)<sp/></highlight></codeline>
<codeline lineno="308"><highlight class="normal">{</highlight></codeline>
<codeline lineno="309"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(<ref refid="structtree" kindref="compound">tree</ref><sp/>!=<sp/>NULL<sp/>&amp;&amp;<sp/><ref refid="structtree" kindref="compound">tree</ref>-&gt;<ref refid="structtree_1a018ae6bc00da4b35baf1beeb30400c42" kindref="member">value</ref><sp/>!=<sp/>x)</highlight></codeline>
<codeline lineno="310"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="311"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="structtree" kindref="compound">tree</ref>-&gt;<ref refid="structtree_1a018ae6bc00da4b35baf1beeb30400c42" kindref="member">value</ref><sp/>&gt;<sp/>x)<sp/><ref refid="structtree" kindref="compound">tree</ref><sp/>=<sp/><ref refid="structtree" kindref="compound">tree</ref>-&gt;<ref refid="structtree_1a083c30bd3490726413b3fb58372df5bb" kindref="member">l</ref>;</highlight></codeline>
<codeline lineno="312"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/><ref refid="structtree" kindref="compound">tree</ref><sp/>=<sp/><ref refid="structtree" kindref="compound">tree</ref>-&gt;<ref refid="structtree_1aa8e8c4e1f409bcc1f39617c2645106dc" kindref="member">r</ref>;</highlight></codeline>
<codeline lineno="313"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="314"><highlight class="normal"></highlight></codeline>
<codeline lineno="315"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(<ref refid="structtree" kindref="compound">tree</ref>!=NULL);</highlight></codeline>
<codeline lineno="316"><highlight class="normal">}</highlight></codeline>
<codeline lineno="317"><highlight class="normal"></highlight></codeline>
<codeline lineno="323"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="data__tree_8c_1aea5e5e964adbddeba8bc9b28edffa2da" kindref="member">printTree</ref>(<ref refid="structtree" kindref="compound">TREE</ref><sp/><ref refid="structtree" kindref="compound">tree</ref>)</highlight></codeline>
<codeline lineno="324"><highlight class="normal">{</highlight></codeline>
<codeline lineno="325"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(<ref refid="structtree" kindref="compound">tree</ref>!=NULL)</highlight></codeline>
<codeline lineno="326"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="327"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="data__tree_8c_1aea5e5e964adbddeba8bc9b28edffa2da" kindref="member">printTree</ref>(<ref refid="structtree" kindref="compound">tree</ref>-&gt;<ref refid="structtree_1a083c30bd3490726413b3fb58372df5bb" kindref="member">l</ref>);</highlight></codeline>
<codeline lineno="328"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>printf(</highlight><highlight class="stringliteral">&quot;valor<sp/>%d\n&quot;</highlight><highlight class="normal">,<sp/><ref refid="structtree" kindref="compound">tree</ref>-&gt;<ref refid="structtree_1a018ae6bc00da4b35baf1beeb30400c42" kindref="member">value</ref>);</highlight></codeline>
<codeline lineno="329"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="data__tree_8c_1aea5e5e964adbddeba8bc9b28edffa2da" kindref="member">printTree</ref>(<ref refid="structtree" kindref="compound">tree</ref>-&gt;<ref refid="structtree_1aa8e8c4e1f409bcc1f39617c2645106dc" kindref="member">r</ref>);</highlight></codeline>
<codeline lineno="330"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="331"><highlight class="normal">}</highlight></codeline>
<codeline lineno="332"><highlight class="normal"></highlight></codeline>
<codeline lineno="338"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="data__tree_8c_1a35b0424230cce746bafe0fdb078c0e9e" kindref="member">freeTree</ref>(<ref refid="structtree" kindref="compound">TREE</ref><sp/>node){</highlight></codeline>
<codeline lineno="339"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(node<sp/>!=<sp/>NULL)<sp/>{</highlight></codeline>
<codeline lineno="340"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="data__tree_8c_1a35b0424230cce746bafe0fdb078c0e9e" kindref="member">freeTree</ref>(node-&gt;<ref refid="structtree_1aa8e8c4e1f409bcc1f39617c2645106dc" kindref="member">r</ref>);</highlight></codeline>
<codeline lineno="341"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="data__tree_8c_1a35b0424230cce746bafe0fdb078c0e9e" kindref="member">freeTree</ref>(node-&gt;<ref refid="structtree_1a083c30bd3490726413b3fb58372df5bb" kindref="member">l</ref>);</highlight></codeline>
<codeline lineno="342"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>free(node);</highlight></codeline>
<codeline lineno="343"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="344"><highlight class="normal">}</highlight></codeline>
<codeline lineno="345"><highlight class="normal"></highlight></codeline>
<codeline lineno="351"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="data__tree_8c_1af30f811f4a786e9f8845b60ab7161697" kindref="member">freeTreeUsers</ref>(<ref refid="structtreeUsers" kindref="compound">TREEUSERS</ref><sp/>node){</highlight></codeline>
<codeline lineno="352"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(node<sp/>!=<sp/>NULL)<sp/>{</highlight></codeline>
<codeline lineno="353"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="data__tree_8c_1af30f811f4a786e9f8845b60ab7161697" kindref="member">freeTreeUsers</ref>(node-&gt;<ref refid="structtreeUsers_1aaf580e859d964eb6cbbaa3ae4ce6e89d" kindref="member">r</ref>);</highlight></codeline>
<codeline lineno="354"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="data__tree_8c_1af30f811f4a786e9f8845b60ab7161697" kindref="member">freeTreeUsers</ref>(node-&gt;<ref refid="structtreeUsers_1a40aa2defa136c59da42d8fa25189a4e3" kindref="member">l</ref>);</highlight></codeline>
<codeline lineno="355"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>free(node);</highlight></codeline>
<codeline lineno="356"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="357"><highlight class="normal">}</highlight></codeline>
<codeline lineno="358"><highlight class="normal"></highlight></codeline>
<codeline lineno="364"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="data__tree_8c_1a4e89413c85c0181bf82952e2a2f381bd" kindref="member">freeTreeRepos</ref>(<ref refid="structtreeRepos" kindref="compound">TREEREPOS</ref><sp/>node){</highlight></codeline>
<codeline lineno="365"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(node<sp/>!=<sp/>NULL)<sp/>{</highlight></codeline>
<codeline lineno="366"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="data__tree_8c_1a4e89413c85c0181bf82952e2a2f381bd" kindref="member">freeTreeRepos</ref>(node-&gt;<ref refid="structtreeRepos_1a2a7406b1fb2cb03d2c3c195aca0c34f2" kindref="member">r</ref>);</highlight></codeline>
<codeline lineno="367"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="data__tree_8c_1a4e89413c85c0181bf82952e2a2f381bd" kindref="member">freeTreeRepos</ref>(node-&gt;<ref refid="structtreeRepos_1a2cfcbe8f4ac39861066bc1e7d605c423" kindref="member">l</ref>);</highlight></codeline>
<codeline lineno="368"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>free(node);</highlight></codeline>
<codeline lineno="369"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="370"><highlight class="normal">}</highlight></codeline>
<codeline lineno="371"><highlight class="normal"></highlight></codeline>
<codeline lineno="378"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="data__tree_8c_1ab10923aaf4bec3a6d226ddeec9a8c777" kindref="member">countnodes</ref>(<ref refid="structtree" kindref="compound">TREE</ref><sp/><ref refid="structtree" kindref="compound">tree</ref>)</highlight></codeline>
<codeline lineno="379"><highlight class="normal">{</highlight></codeline>
<codeline lineno="380"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(<ref refid="structtree" kindref="compound">tree</ref>!=NULL)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(1+<ref refid="data__tree_8c_1ab10923aaf4bec3a6d226ddeec9a8c777" kindref="member">countnodes</ref>(<ref refid="structtree" kindref="compound">tree</ref>-&gt;<ref refid="structtree_1a083c30bd3490726413b3fb58372df5bb" kindref="member">l</ref>)+<ref refid="data__tree_8c_1ab10923aaf4bec3a6d226ddeec9a8c777" kindref="member">countnodes</ref>(<ref refid="structtree" kindref="compound">tree</ref>-&gt;<ref refid="structtree_1aa8e8c4e1f409bcc1f39617c2645106dc" kindref="member">r</ref>));</highlight></codeline>
<codeline lineno="381"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>0;</highlight></codeline>
<codeline lineno="382"><highlight class="normal">}</highlight></codeline>
<codeline lineno="383"><highlight class="normal"></highlight></codeline>
<codeline lineno="393"><highlight class="normal"></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*<sp/><ref refid="data__tree_8c_1a6bd8de736b75e89de56d0704c7067c73" kindref="member">searchUsers</ref><sp/>(<ref refid="structtreeUsers" kindref="compound">TREEUSERS</ref><sp/><ref refid="structtree" kindref="compound">tree</ref>,<sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*<sp/>x)<sp/></highlight></codeline>
<codeline lineno="394"><highlight class="normal">{</highlight></codeline>
<codeline lineno="395"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(<ref refid="structtree" kindref="compound">tree</ref><sp/>!=<sp/>NULL<sp/>&amp;&amp;<sp/>strcmp(<ref refid="structtree" kindref="compound">tree</ref>-&gt;id,x)!=0)</highlight></codeline>
<codeline lineno="396"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="397"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(strcmp(<ref refid="structtree" kindref="compound">tree</ref>-&gt;id,x)<sp/>&gt;<sp/>0)<sp/><ref refid="structtree" kindref="compound">tree</ref><sp/>=<sp/><ref refid="structtree" kindref="compound">tree</ref>-&gt;<ref refid="structtree_1a083c30bd3490726413b3fb58372df5bb" kindref="member">l</ref>;</highlight></codeline>
<codeline lineno="398"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/><ref refid="structtree" kindref="compound">tree</ref><sp/>=<sp/><ref refid="structtree" kindref="compound">tree</ref>-&gt;<ref refid="structtree_1aa8e8c4e1f409bcc1f39617c2645106dc" kindref="member">r</ref>;</highlight></codeline>
<codeline lineno="399"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="400"><highlight class="normal"></highlight></codeline>
<codeline lineno="401"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>strdup(<ref refid="structtree" kindref="compound">tree</ref>-&gt;login);</highlight></codeline>
<codeline lineno="402"><highlight class="normal">}</highlight></codeline>
<codeline lineno="403"><highlight class="normal"></highlight></codeline>
<codeline lineno="413"><highlight class="normal"><ref refid="structusers" kindref="compound">USERS</ref><sp/><ref refid="data__tree_8c_1ab525532283c815cbf66c0b7be898122a" kindref="member">searchUsers9</ref><sp/>(<ref refid="structtreeUsers9" kindref="compound">TREEUSERS9</ref><sp/><ref refid="structtree" kindref="compound">tree</ref>,<sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*<sp/>x)<sp/></highlight></codeline>
<codeline lineno="414"><highlight class="normal">{</highlight></codeline>
<codeline lineno="415"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(<ref refid="structtree" kindref="compound">tree</ref><sp/>!=<sp/>NULL<sp/>&amp;&amp;<sp/>strcmp(<ref refid="structtree" kindref="compound">tree</ref>-&gt;id,x)!=0)</highlight></codeline>
<codeline lineno="416"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="417"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(strcmp(<ref refid="structtree" kindref="compound">tree</ref>-&gt;id,x)<sp/>&gt;<sp/>0)<sp/><ref refid="structtree" kindref="compound">tree</ref><sp/>=<sp/><ref refid="structtree" kindref="compound">tree</ref>-&gt;<ref refid="structtree_1a083c30bd3490726413b3fb58372df5bb" kindref="member">l</ref>;</highlight></codeline>
<codeline lineno="418"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/><ref refid="structtree" kindref="compound">tree</ref><sp/>=<sp/><ref refid="structtree" kindref="compound">tree</ref>-&gt;<ref refid="structtree_1aa8e8c4e1f409bcc1f39617c2645106dc" kindref="member">r</ref>;</highlight></codeline>
<codeline lineno="419"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="420"><highlight class="normal"></highlight></codeline>
<codeline lineno="421"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(<ref refid="structtree" kindref="compound">tree</ref>-&gt;node);</highlight></codeline>
<codeline lineno="422"><highlight class="normal">}</highlight></codeline>
<codeline lineno="423"><highlight class="normal"></highlight></codeline>
<codeline lineno="433"><highlight class="normal"></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*<sp/><ref refid="data__tree_8c_1a5a0e82b471da785140fe1e1593b7c115" kindref="member">searchRepos</ref><sp/>(<ref refid="structtreeRepos" kindref="compound">TREEREPOS</ref><sp/><ref refid="structtree" kindref="compound">tree</ref>,<sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*<sp/>x)<sp/></highlight></codeline>
<codeline lineno="434"><highlight class="normal">{</highlight></codeline>
<codeline lineno="435"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(<ref refid="structtree" kindref="compound">tree</ref><sp/>!=<sp/>NULL<sp/>&amp;&amp;<sp/>strcmp(<ref refid="structtree" kindref="compound">tree</ref>-&gt;id,x)!=0)</highlight></codeline>
<codeline lineno="436"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="437"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(strcmp(<ref refid="structtree" kindref="compound">tree</ref>-&gt;id,x)<sp/>&gt;<sp/>0)<sp/><ref refid="structtree" kindref="compound">tree</ref><sp/>=<sp/><ref refid="structtree" kindref="compound">tree</ref>-&gt;<ref refid="structtree_1a083c30bd3490726413b3fb58372df5bb" kindref="member">l</ref>;</highlight></codeline>
<codeline lineno="438"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/><ref refid="structtree" kindref="compound">tree</ref><sp/>=<sp/><ref refid="structtree" kindref="compound">tree</ref>-&gt;<ref refid="structtree_1aa8e8c4e1f409bcc1f39617c2645106dc" kindref="member">r</ref>;</highlight></codeline>
<codeline lineno="439"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="440"><highlight class="normal"></highlight></codeline>
<codeline lineno="441"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>strdup(<ref refid="structtree" kindref="compound">tree</ref>-&gt;message);</highlight></codeline>
<codeline lineno="442"><highlight class="normal">}</highlight></codeline>
<codeline lineno="443"><highlight class="normal"></highlight></codeline>
<codeline lineno="453"><highlight class="normal"><ref refid="structtree" kindref="compound">TREE</ref><sp/><ref refid="data__tree_8c_1a0a88042ec7804bda4bf0a321ea03b4bf" kindref="member">friendsTreeF</ref>(<ref refid="structusers" kindref="compound">USERS</ref><sp/><ref refid="structusers" kindref="compound">users</ref>,</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>*k)<sp/></highlight></codeline>
<codeline lineno="454"><highlight class="normal">{</highlight></codeline>
<codeline lineno="455"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structusers" kindref="compound">USERS</ref><sp/>temp<sp/>=<sp/><ref refid="structusers" kindref="compound">users</ref>;</highlight></codeline>
<codeline lineno="456"><highlight class="normal"></highlight></codeline>
<codeline lineno="457"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*follestr<sp/>=<sp/><ref refid="data__users_8c_1adf3c1b44e2941df2380b4026644e956b" kindref="member">obtain_followersUsers</ref>(temp);</highlight></codeline>
<codeline lineno="458"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>folleint<sp/>=<sp/>atoi(follestr);</highlight></codeline>
<codeline lineno="459"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*follistr<sp/>=<sp/><ref refid="data__users_8c_1a810da3218e7a83322d70237fd4f2e639" kindref="member">obtain_followingUsers</ref>(temp);</highlight></codeline>
<codeline lineno="460"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>folliint<sp/>=<sp/>atoi(follistr);</highlight></codeline>
<codeline lineno="461"><highlight class="normal"></highlight></codeline>
<codeline lineno="462"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structtree" kindref="compound">TREE</ref><sp/>followersTree<sp/>=<sp/>NULL;</highlight></codeline>
<codeline lineno="463"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structtree" kindref="compound">TREE</ref><sp/>friendsTree<sp/>=<sp/>NULL;</highlight></codeline>
<codeline lineno="464"><highlight class="normal"></highlight></codeline>
<codeline lineno="465"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(folleint<sp/>==<sp/>0<sp/>||<sp/>folliint<sp/>==<sp/>0)<sp/>(*k)<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="466"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="467"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//followersTree<sp/>=<sp/>NULL;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="468"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i;</highlight></codeline>
<codeline lineno="469"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*aux<sp/>=<sp/><ref refid="data__users_8c_1afa24648bc4b3dd3906a634b38fdcba97" kindref="member">obtain_followersListUsers</ref>(temp);</highlight></codeline>
<codeline lineno="470"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*followersList<sp/>=<sp/>aux<sp/>+<sp/>1;</highlight></codeline>
<codeline lineno="471"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>folleint;<sp/>i++)<sp/>{</highlight></codeline>
<codeline lineno="472"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*aux2<sp/>=<sp/>strsep(&amp;followersList,<sp/></highlight><highlight class="stringliteral">&quot;,]\n&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="473"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="structtreeRepos_1a2cfcbe8f4ac39861066bc1e7d605c423" kindref="member">l</ref><sp/>=<sp/>atoi(aux2);</highlight></codeline>
<codeline lineno="474"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>followersTree<sp/>=<sp/><ref refid="data__tree_8c_1a046d3ee75787615cc6a9cc1bca11521f" kindref="member">insert</ref>(followersTree,<ref refid="structtreeRepos_1a2cfcbe8f4ac39861066bc1e7d605c423" kindref="member">l</ref>);</highlight></codeline>
<codeline lineno="475"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="476"><highlight class="normal"></highlight></codeline>
<codeline lineno="477"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//friendsTree<sp/>=<sp/>NULL;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="478"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*k<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="479"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*aux3<sp/>=<sp/><ref refid="data__users_8c_1a27316e051f0b10eaf9a7ce1fa2e4e2e9" kindref="member">obtain_followingListUsers</ref>(temp);</highlight></codeline>
<codeline lineno="480"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*followingList<sp/>=<sp/>aux3<sp/>+<sp/>1;</highlight></codeline>
<codeline lineno="481"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>folliint;<sp/>i++)<sp/>{</highlight></codeline>
<codeline lineno="482"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*aux4<sp/>=<sp/>strsep(&amp;followingList,<sp/></highlight><highlight class="stringliteral">&quot;,]\n&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="483"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>t<sp/>=<sp/>atoi(aux4);</highlight></codeline>
<codeline lineno="484"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>flag<sp/>=<sp/><ref refid="data__tree_8c_1aeb08a84830917a5d5d0f343cff03f335" kindref="member">search</ref>(followersTree,t);</highlight></codeline>
<codeline lineno="485"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(flag<sp/>==<sp/>1)<sp/>{</highlight></codeline>
<codeline lineno="486"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>friendsTree<sp/>=<sp/><ref refid="data__tree_8c_1a046d3ee75787615cc6a9cc1bca11521f" kindref="member">insert</ref>(friendsTree,t);</highlight></codeline>
<codeline lineno="487"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(*k)++;</highlight></codeline>
<codeline lineno="488"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="489"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="490"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="491"><highlight class="normal"></highlight></codeline>
<codeline lineno="492"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>friendsTree;</highlight></codeline>
<codeline lineno="493"><highlight class="normal">}</highlight></codeline>
    </programlisting>
    <location file="data_tree.c"/>
  </compounddef>
</doxygen>
